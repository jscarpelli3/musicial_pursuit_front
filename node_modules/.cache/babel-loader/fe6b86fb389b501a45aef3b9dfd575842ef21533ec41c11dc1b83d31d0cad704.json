{"ast":null,"code":"import { renderSlot as _renderSlot, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, KeepAlive as _KeepAlive, createVNode as _createVNode, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"contentTable\"\n};\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = {\n  key: 2\n};\nconst _hoisted_4 = {\n  key: 3\n};\nconst _hoisted_5 = [\"colspan\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_md_table_alternate_header = _resolveComponent(\"md-table-alternate-header\");\n  const _component_md_table_thead = _resolveComponent(\"md-table-thead\");\n  const _component_md_table_row_ghost = _resolveComponent(\"md-table-row-ghost\");\n  const _component_md_content = _resolveComponent(\"md-content\");\n  const _component_md_tag_switcher = _resolveComponent(\"md-tag-switcher\");\n  return _openBlock(), _createBlock(_component_md_tag_switcher, {\n    \"md-tag\": $options.contentTag,\n    class: \"md-table\"\n  }, {\n    default: _withCtx(() => [_renderSlot(_ctx.$slots, \"md-table-toolbar\"), (_openBlock(), _createBlock(_KeepAlive, null, [_ctx.$scopedSlots['md-table-alternate-header'] && $options.selectedCount ? (_openBlock(), _createBlock(_component_md_table_alternate_header, {\n      key: 0\n    }, {\n      default: _withCtx(() => [_renderSlot(_ctx.$slots, \"md-table-alternate-header\", {\n        count: $options.selectedCount\n      })]),\n      _: 3 /* FORWARDED */\n    })) : _createCommentVNode(\"v-if\", true)], 1024 /* DYNAMIC_SLOTS */)), $props.mdFixedHeader ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 0,\n      class: _normalizeClass([\"md-table-fixed-header\", $options.headerClasses]),\n      style: _normalizeStyle($options.headerStyles)\n    }, [_createElementVNode(\"div\", {\n      class: \"md-table-fixed-header-container\",\n      ref: \"fixedHeaderContainer\",\n      onScroll: _cache[0] || (_cache[0] = (...args) => $options.setHeaderScroll && $options.setHeaderScroll(...args))\n    }, [_createElementVNode(\"table\", {\n      style: _normalizeStyle($options.fixedHeaderTableStyles)\n    }, [_createVNode(_component_md_table_thead)], 4 /* STYLE */)], 544 /* HYDRATE_EVENTS, NEED_PATCH */)], 6 /* CLASS, STYLE */)) : _createCommentVNode(\"v-if\", true), _createVNode(_component_md_content, {\n      class: _normalizeClass([\"md-table-content md-scrollbar\", $options.contentClasses]),\n      style: _normalizeStyle($options.contentStyles),\n      onScroll: $options.setScroll\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"table\", _hoisted_1, [!$props.mdFixedHeader && _ctx.$scopedSlots['md-table-row'] ? (_openBlock(), _createBlock(_component_md_table_thead, {\n        key: 0,\n        class: _normalizeClass($options.headerClasses)\n      }, null, 8 /* PROPS */, [\"class\"])) : _createCommentVNode(\"v-if\", true), !_ctx.$scopedSlots['md-table-row'] ? (_openBlock(), _createElementBlock(\"tbody\", _hoisted_2, [_renderSlot(_ctx.$slots, \"default\")])) : $props.value.length ? (_openBlock(), _createElementBlock(\"tbody\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.value, (item, index) => {\n        return _openBlock(), _createBlock(_component_md_table_row_ghost, {\n          key: $options.getRowId(item, $props.mdModelId),\n          \"md-id\": $options.getRowId(item, $props.mdModelId),\n          \"md-index\": index,\n          \"md-item\": item\n        }, {\n          default: _withCtx(() => [_renderSlot(_ctx.$slots, \"md-table-row\", {\n            item: item,\n            index: index\n          })]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"md-id\", \"md-index\", \"md-item\"]);\n      }), 128 /* KEYED_FRAGMENT */))])) : _ctx.$scopedSlots['md-table-empty-state'] ? (_openBlock(), _createElementBlock(\"tbody\", _hoisted_4, [_createElementVNode(\"tr\", null, [_createElementVNode(\"td\", {\n        colspan: $options.headerCount\n      }, [_renderSlot(_ctx.$slots, \"md-table-empty-state\")], 8 /* PROPS */, _hoisted_5)])])) : _createCommentVNode(\"v-if\", true)], 512 /* NEED_PATCH */), _renderSlot(_ctx.$slots, \"md-table-pagination\")]),\n      _: 3 /* FORWARDED */\n    }, 8 /* PROPS */, [\"class\", \"style\", \"onScroll\"]), !$options.hasValue && _ctx.$scopedSlots['md-table-row'] ? _renderSlot(_ctx.$slots, \"default\", {\n      key: 1\n    }) : _createCommentVNode(\"v-if\", true)]),\n    _: 3 /* FORWARDED */\n  }, 8 /* PROPS */, [\"md-tag\"]);\n}","map":{"version":3,"mappings":";;EAmBaA,GAAG,EAAC;AAAc;;;;;;;;;;;;;;;;;uBAlB7BC,aAiDkBC;IAjDA,QAAM,EAAEC,mBAAU;IAAEC,KAAK,EAAC;;sBAC1C,MAAgC,CAAhCC,YAAgCC,iDAEhCL,aAIaM,mBAHsBD,iBAAY,iCAAiCH,sBAAa,kBAA3FF,aAE4BO;MAAAC;IAAA;wBAD1B,MAAgE,CAAhEJ,YAAgEC;QAAxBI,KAAK,EAAEP;MAAa;;0EAIsBQ,oBAAa,kBAAnGC,oBAMM;;MANDR,KAAK,mBAAC,uBAAuB,EAASD,sBAAa;MAAGU,KAAK,kBAAEV,qBAAY;QAC5EW,oBAIM;MAJDV,KAAK,EAAC,iCAAiC;MAACJ,GAAG,EAAC,sBAAsB;MAAEe,QAAM,yCAAEZ,6DAAe;QAC9FW,oBAEQ;MAFAD,KAAK,kBAAEV,+BAAsB;QACnCa,aAAkBC,kJAKxBD,aA6BaE;MA7BDd,KAAK,mBAAC,+BAA+B,EAASD,uBAAc;MAAGU,KAAK,kBAAEV,sBAAa;MAAGY,QAAM,EAAEZ;;wBACxG,MAyBQ,CAzBRW,oBAyBQ,SAzBRK,UAyBQ,IAxBwCR,oBAAa,IAAIL,iBAAY,kCAA3EL,aAA+FgB;;QAA9Eb,KAAK,kBAAED,sBAAa;gFAEvBG,iBAAY,kCAA1BM,oBAEQ,sBADNP,YAAQC,6BAGQK,YAAK,CAACS,MAAM,kBAA9BR,oBASQ,yCARNA,oBAOqBS,6BANKV,YAAK,GAArBW,IAAI,EAAEC,KAAK;6BADrBtB,aAOqBuB;UALlBf,GAAG,EAAEN,iBAAQ,CAACmB,IAAI,EAAEX,gBAAS;UAC7B,OAAK,EAAER,iBAAQ,CAACmB,IAAI,EAAEX,gBAAS;UAC/B,UAAQ,EAAEY,KAAK;UACf,SAAO,EAAED;;4BACV,MAAwD,CAAxDjB,YAAwDC;YAA7BgB,IAAI,EAAEA,IAAI;YAAGC,KAAK,EAAEA;;;;0CAIjCjB,iBAAY,0CAA9BM,oBAMQ,sBALNE,oBAIK,aAHHA,oBAEK;QAFAW,OAAO,EAAEtB;MAAW,IACvBE,YAAoCC,oIAM5CD,YAAmCC;;wDAGxBH,iBAAQ,IAAIG,iBAAY,mBAArCD,YAAyDC;MAAAG;IAAA","names":["ref","_createBlock","_component_md_tag_switcher","$options","class","_renderSlot","_ctx","_KeepAlive","_component_md_table_alternate_header","key","count","$props","_createElementBlock","style","_createElementVNode","onScroll","_createVNode","_component_md_table_thead","_component_md_content","_hoisted_1","length","_Fragment","item","index","_component_md_table_row_ghost","colspan"],"sourceRoot":"","sources":["/Users/jscarpelli/ga_seir919/projects/musical_pursuit/musicial_pursuit_front/musical_pursuit/src/components/MdTable/MdTable.vue"],"sourcesContent":["<template>\n  <md-tag-switcher :md-tag=\"contentTag\" class=\"md-table\">\n    <slot name=\"md-table-toolbar\" />\n\n    <keep-alive>\n      <md-table-alternate-header v-if=\"$scopedSlots['md-table-alternate-header'] && selectedCount\">\n        <slot name=\"md-table-alternate-header\" :count=\"selectedCount\" />\n      </md-table-alternate-header>\n    </keep-alive>\n\n    <div class=\"md-table-fixed-header\" :class=\"headerClasses\" :style=\"headerStyles\" v-if=\"mdFixedHeader\">\n      <div class=\"md-table-fixed-header-container\" ref=\"fixedHeaderContainer\" @scroll=\"setHeaderScroll\">\n        <table :style=\"fixedHeaderTableStyles\">\n          <md-table-thead />\n        </table>\n      </div>\n    </div>\n\n    <md-content class=\"md-table-content md-scrollbar\" :class=\"contentClasses\" :style=\"contentStyles\" @scroll=\"setScroll\">\n      <table ref=\"contentTable\">\n        <md-table-thead :class=\"headerClasses\" v-if=\"!mdFixedHeader && $scopedSlots['md-table-row']\" />\n\n        <tbody v-if=\"!$scopedSlots['md-table-row']\">\n          <slot />\n        </tbody>\n\n        <tbody v-else-if=\"value.length\">\n          <md-table-row-ghost\n            v-for=\"(item, index) in value\"\n            :key=\"getRowId(item, mdModelId)\"\n            :md-id=\"getRowId(item, mdModelId)\"\n            :md-index=\"index\"\n            :md-item=\"item\">\n            <slot name=\"md-table-row\" :item=\"item\" :index=\"index\" />\n          </md-table-row-ghost>\n        </tbody>\n\n        <tbody v-else-if=\"$scopedSlots['md-table-empty-state']\">\n          <tr>\n            <td :colspan=\"headerCount\">\n              <slot name=\"md-table-empty-state\" />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <slot name=\"md-table-pagination\" />\n    </md-content>\n\n    <slot v-if=\"!hasValue && $scopedSlots['md-table-row']\" />\n  </md-tag-switcher>\n</template>\n\n<script>\n  import raf from 'raf'\n\n  import MdTagSwitcher from 'components/MdTagSwitcher/MdTagSwitcher'\n  import MdUuid from 'core/utils/MdUuid'\n  import MdPropValidator from 'core/utils/MdPropValidator'\n  import MdTableThead from './MdTableThead'\n  import MdTableAlternateHeader from './MdTableAlternateHeader'\n  import MdTableRow from './MdTableRow'\n  import MdTableRowGhost from './MdTableRowGhost'\n  import MdTableCellSelection from './MdTableCellSelection'\n  import MdResizeObserver from 'core/utils/MdResizeObserver'\n\n  const getObjectAttribute = (object, key) => {\n    let value = object\n\n    for (let attribute of key.split('.')) {\n      value = value[attribute]\n    }\n\n    return value\n  }\n\n  export default {\n    name: 'MdTable',\n    components: {\n      MdTagSwitcher,\n      MdTableAlternateHeader,\n      MdTableThead,\n      MdTableRow,\n      MdTableRowGhost,\n      MdTableCellSelection\n    },\n    props: {\n      value: [Array, Object],\n      mdModelId: {\n        type: String,\n        default: 'id'\n      },\n      mdCard: Boolean,\n      mdFixedHeader: Boolean,\n      mdHeight: {\n        type: [Number, String],\n        default: 400\n      },\n      mdSort: String,\n      mdSortOrder: {\n        type: String,\n        default: 'asc',\n        ...MdPropValidator('md-sort-order', ['asc', 'desc'])\n      },\n      mdSortFn: {\n        type: Function,\n        default (value) {\n          const sortBy = this.MdTable.sort\n          const isAsc = this.MdTable.sortOrder === 'asc'\n          const multiplier = isAsc ? 1 : -1\n\n          /* eslint-disable complexity */\n          const comparator = function(a, b) {\n            const aAttr = getObjectAttribute(a, sortBy)\n            const bAttr = getObjectAttribute(b, sortBy)\n\n            if (aAttr === bAttr) {\n              return 0\n            } else if (aAttr === null || aAttr === undefined || Number.isNaN(aAttr)) {\n              // a is last\n              return 1\n            } else if (bAttr === null || bAttr === undefined || Number.isNaN(bAttr)) {\n              // b is last\n              return -1\n            } else if (typeof aAttr === 'number' && typeof bAttr === 'number') {\n              // numerical compare, negate if descending\n              return (aAttr - bAttr) * multiplier\n            }\n            // locale compare, negate if descending\n            return String(aAttr).localeCompare(String(bAttr)) * multiplier\n          }\n          /* eslint-enable complexity */\n\n          return value.sort(comparator)\n        }\n      },\n      mdSelectedValue: {\n        type: [Array, Object]\n      }\n    },\n    data () {\n      return {\n        windowResizeObserver: null,\n        fixedHeaderTableWidth: 0,\n        fixedHeaderPadding: 0,\n        hasContentScroll: false,\n        MdTable: {\n          items: {},\n          sort: null,\n          sortOrder: null,\n          singleSelection: null,\n          selectedItems: [],\n          selectable: [],\n          fixedHeader: null,\n          contentPadding: null,\n          contentEl: null,\n          // computed\n          hasValue: this.hasValue,\n          // methods\n          emitEvent: this.emitEvent,\n          sortTable: this.sortTable,\n          manageItemSelection: this.manageItemSelection,\n          getModel: this.getModel,\n          getModelItem: this.getModelItem,\n          selectingMode: null\n        },\n        itemsUuidMap: new WeakMap()\n      }\n    },\n    computed: {\n      contentTag () {\n        if (this.mdCard) {\n          return 'md-card'\n        }\n\n        return 'md-content'\n      },\n      headerCount () {\n        return Object.keys(this.MdTable.items).length\n      },\n      selectedCount () {\n        return this.MdTable.selectedItems.length\n      },\n      headerStyles () {\n        if (this.mdFixedHeader) {\n          return `padding-right: ${this.fixedHeaderPadding}px`\n        }\n      },\n      hasValue () {\n        return this.value && this.value.length !== 0\n      },\n      headerClasses () {\n        if ((this.mdFixedHeader && this.hasContentScroll) || !this.hasValue) {\n          return 'md-table-fixed-header-active'\n        }\n      },\n      contentStyles () {\n        if (this.mdFixedHeader) {\n          const height = typeof this.mdHeight === 'number'\n            ? `${this.mdHeight}px`\n            : this.mdHeight\n          return `height: ${height};max-height: ${height}`\n        }\n      },\n      contentClasses () {\n        if (this.mdFixedHeader && this.value.length === 0) {\n          return `md-table-empty`\n        }\n      },\n      fixedHeaderTableStyles () {\n        return {\n          width: this.fixedHeaderTableWidth + 'px'\n        }\n      }\n    },\n    provide () {\n      const MdTable = this.MdTable\n\n      return { MdTable }\n    },\n    watch: {\n      mdSort: {\n        immediate: true,\n        handler () {\n          this.MdTable.sort = this.mdSort\n        }\n      },\n      mdSortOrder: {\n        immediate: true,\n        handler () {\n          this.MdTable.sortOrder = this.mdSortOrder\n        }\n      },\n      mdFixedHeader: {\n        immediate: true,\n        handler () {\n          this.MdTable.fixedHeader = this.mdFixedHeader\n        }\n      },\n      hasValue: {\n        immediate: true,\n        handler () {\n          this.MdTable.hasValue = this.hasValue\n        }\n      },\n      'MdTable.selectedItems' (val, old) {\n        let changed = (() => {\n          let isValEmpty = this.isEmpty(val)\n          let isOldEmpty = this.isEmpty(old)\n          let hasValues = isValEmpty && isOldEmpty\n\n          if (hasValues) {\n            return false\n          } else if (!hasValues) {\n            return (val.length !== old.length) ? true : !val.every((item, index) => item == old[index])\n          }\n\n          return true\n        })()\n\n        if (changed) {\n          this.select(val)\n        }\n      },\n      'MdTable.singleSelection' (val, old) {\n        if (val != old) {\n          this.select(val)\n        }\n      },\n      mdSelectedValue () {\n        this.syncSelectedValue()\n      },\n      value () {\n        this.syncSelectedValue()\n        this.setWidth()\n      }\n    },\n    methods: {\n      isEmpty (value) {\n        return !value || value.length === 0\n      },\n      emitEvent (eventName, value) {\n        this.$emit(eventName, value)\n      },\n      getRowId (item, propertyName) {\n        let id = item[propertyName]\n\n        if (id) {\n          return id\n        }\n\n        id = this.itemsUuidMap.get(item)\n\n        if (!id) {\n          id = 'md-row-' + MdUuid()\n          this.itemsUuidMap.set(item, id)\n        }\n\n        return id\n      },\n      setScroll ($event) {\n        raf(() => {\n          if (this.mdFixedHeader) {\n            this.$refs.fixedHeaderContainer.scrollLeft = $event.target.scrollLeft\n          }\n\n          this.hasContentScroll = $event.target.scrollTop > 0\n        })\n      },\n      setHeaderScroll ($event) {\n        raf(() => {\n          this.MdTable.contentEl.scrollLeft = $event.target.scrollLeft\n        })\n      },\n      getContentEl () {\n        return this.$el.querySelector('.md-table-content')\n      },\n      setContentEl () {\n        this.MdTable.contentEl = this.getContentEl()\n      },\n      setHeaderPadding () {\n        this.setContentEl()\n\n        const { contentEl } = this.MdTable\n        const tableEl = contentEl.childNodes[0]\n\n        this.fixedHeaderPadding = contentEl.offsetWidth - tableEl.offsetWidth\n      },\n      getModel () {\n        return this.value\n      },\n      getModelItem (index) {\n        return this.value[index]\n      },\n      manageItemSelection (item) {\n        if (this.MdTable.selectedItems.includes(item)) {\n          this.MdTable.selectedItems = this.MdTable.selectedItems.filter(target => target !== item)\n        } else {\n          this.MdTable.selectedItems = this.MdTable.selectedItems.concat([item])\n        }\n      },\n      sortTable () {\n        if (Array.isArray(this.value)) {\n          this.$emit('input', this.mdSortFn(this.value))\n        }\n      },\n      select (val) {\n        this.$emit('update:mdSelectedValue', val)\n        this.$emit('md-selected', val)\n      },\n      syncSelectedValue () {\n        this.$nextTick().then(() => { // render the table first\n          if (this.MdTable.selectingMode === 'single') {\n            this.MdTable.singleSelection = this.mdSelectedValue\n          } else if (this.MdTable.selectingMode === 'multiple') {\n            this.MdTable.selectedItems = this.mdSelectedValue || []\n          }\n        })\n      },\n      setWidth () {\n        if (this.mdFixedHeader) {\n          this.fixedHeaderTableWidth = this.$refs.contentTable.offsetWidth\n        }\n      }\n    },\n    created () {\n      if (this.mdSort) {\n        this.sortTable()\n      }\n\n      this.syncSelectedValue()\n    },\n    mounted () {\n      this.setContentEl()\n      this.$nextTick().then(this.setWidth)\n\n      if (this.mdFixedHeader) {\n        this.setHeaderPadding()\n        this.windowResizeObserver = new MdResizeObserver(window, this.setWidth)\n      }\n    },\n    beforeDestroy () {\n      if (this.windowResizeObserver) {\n        this.windowResizeObserver.destroy()\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n  @import \"~components/MdAnimation/variables\";\n\n  .md-table {\n    display: flex;\n    flex-flow: column wrap;\n    overflow-x: auto;\n\n    .md-table-fixed-header {\n      position: relative;\n\n      .md-table-fixed-header-container {\n        -webkit-box-flex: 1;\n        flex: 1;\n        overflow-x: auto;\n\n        &::-webkit-scrollbar,\n        &::-webkit-scrollbar-thumb,\n        &::-webkit-scrollbar-button {\n          display: none;\n        }\n      }\n    }\n\n    .md-table-fixed-header-active {\n      border-bottom: 1px solid;\n    }\n\n    .md-table-content {\n      flex: 1;\n      overflow-x: auto;\n      transition: height .3s $md-transition-default-timing;\n    }\n\n    .md-table-empty {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    table {\n      width: 100%;\n      border-spacing: 0;\n      border-collapse: collapse;\n      overflow: hidden;\n    }\n  }\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}