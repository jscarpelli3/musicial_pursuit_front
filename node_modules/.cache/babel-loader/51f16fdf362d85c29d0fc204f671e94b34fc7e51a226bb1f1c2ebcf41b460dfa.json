{"ast":null,"code":"import axios from 'axios';\nimport Client from '../services/api';\nexport default {\n  name: 'UserBarks',\n  props: {\n    user_id: Number,\n    user_handle: String\n  },\n  data: () => ({\n    user_profile: {},\n    barks: [],\n    has_barks: false,\n    barked: [],\n    has_barked: false\n  }),\n  mounted() {\n    this.getUserBarks();\n  },\n  methods: {\n    async getUserBarks() {\n      // const intId = this.user_id\n      // const res = await axios.get(`http://localhost:3001/api/user/userbarked/${intId}`)\n      // this.user_profile = res.data\n      // console.log(res)\n      // this.barks = res.data\n      this.getBarks();\n      this.getBarked();\n    },\n    async deleteBark(barker, created, self) {\n      await Client.delete(`bark/${barker}/${created}`);\n      console.log(created);\n      console.log(barker);\n      if (self) {\n        this.getBarked();\n      } else {\n        this.getBarks();\n      }\n    },\n    async getBarks() {\n      const intId = this.user_id;\n      // const res = await axios.get(`http://localhost:3001/api/user/userbarked/${intId}`)\n      const res = await axios.get(`https://rockdog-trivia-server.herokuapp.com/api/user/userbarker/${intId}`);\n      this.user_profile = res.data;\n      console.log(res);\n      this.barks = res.data;\n    },\n    async getBarked() {\n      const intId = this.user_id;\n      // const res_barked = await axios.get(`http://localhost:3001/api/user/userbarker/${intId}`)\n      const res_barked = await axios.get(`https://rockdog-trivia-server.herokuapp.com/api/user/userbarked/${intId}`);\n      console.log(res_barked);\n      this.barked = res_barked.data;\n    },\n    // async getUserBarks() {\n    //   const intId = this.user_id\n    //   // const Id = intId.toString()\n    //   const res = await axios.get(`http://localhost:3001/api/user/userbarked/${intId}`)\n    //   this.user_profile = res.data\n    //   this.barks = res.data.barked\n    //   const res_barked = await axios.get(`http://localhost:3001/api/user/userbarker/${intId}`)\n    //   console.log(res_barked)\n    //   this.barked = res_barked.data.barker\n    // },\n    barkTime(timestamp) {\n      let split = timestamp.split(/[T:]/);\n      let date = `${split[0]}`;\n      let time = `${split[1]}:${split[2]}`;\n      return `Barked at ${time} on ${date}`;\n    }\n  }\n};","map":{"version":3,"mappings":"AA+BA,OAAOA,KAAI,MAAO,OAAM;AACxB,OAAOC,MAAK,MAAO,iBAAgB;AAEnC,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAK,EAAE;IACLC,OAAO,EAAEC,MAAM;IACfC,WAAW,EAAEC;EACf,CAAC;EACDC,IAAI,EAAE,OAAO;IACXC,YAAY,EAAE,CAAC,CAAC;IAChBC,KAAK,EAAE,EAAE;IACTC,SAAS,EAAE,KAAK;IAChBC,MAAM,EAAE,EAAE;IACVC,UAAU,EAAE;EACd,CAAC,CAAC;EACFC,OAAO,GAAG;IACR,IAAI,CAACC,YAAY,EAAC;EACpB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,YAAY,GAAG;MACnB;MACA;MACA;MACA;MACA;MACA,IAAI,CAACE,QAAQ,EAAC;MACd,IAAI,CAACC,SAAS,EAAC;IACjB,CAAC;IACD,MAAMC,UAAU,CAACC,MAAM,EAAEC,OAAO,EAAEC,IAAI,EAAE;MACtC,MAAMrB,MAAM,CAACsB,MAAM,CAAE,QAAOH,MAAO,IAAGC,OAAQ,EAAC;MAC/CG,OAAO,CAACC,GAAG,CAACJ,OAAO;MACnBG,OAAO,CAACC,GAAG,CAACL,MAAM;MAClB,IAAIE,IAAI,EAAE;QACR,IAAI,CAACJ,SAAS,EAAC;MACjB,OAAO;QACL,IAAI,CAACD,QAAQ,EAAC;MAChB;IACF,CAAC;IACD,MAAMA,QAAQ,GAAG;MACf,MAAMS,KAAI,GAAI,IAAI,CAACtB,OAAM;MACzB;MACA,MAAMuB,GAAE,GAAI,MAAM3B,KAAK,CAAC4B,GAAG,CAAE,mEAAkEF,KAAM,EAAC;MACtG,IAAI,CAACjB,YAAW,GAAIkB,GAAG,CAACnB,IAAG;MAC3BgB,OAAO,CAACC,GAAG,CAACE,GAAG;MACf,IAAI,CAACjB,KAAI,GAAIiB,GAAG,CAACnB,IAAG;IACtB,CAAC;IACD,MAAMU,SAAS,GAAG;MAChB,MAAMQ,KAAI,GAAI,IAAI,CAACtB,OAAM;MACzB;MACA,MAAMyB,UAAS,GAAI,MAAM7B,KAAK,CAAC4B,GAAG,CAAE,mEAAkEF,KAAM,EAAC;MAC7GF,OAAO,CAACC,GAAG,CAACI,UAAU;MACtB,IAAI,CAACjB,MAAK,GAAIiB,UAAU,CAACrB,IAAG;IAC9B,CAAC;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAsB,QAAQ,CAACC,SAAS,EAAE;MAClB,IAAIC,KAAI,GAAID,SAAS,CAACC,KAAK,CAAC,MAAM;MAClC,IAAIC,IAAG,GAAK,GAAED,KAAK,CAAC,CAAC,CAAE;MACvB,IAAIE,IAAG,GAAK,GAAEF,KAAK,CAAC,CAAC,CAAE,IAAGA,KAAK,CAAC,CAAC,CAAE;MACnC,OAAQ,aAAYE,IAAI,OAAOD,IAAK;IACtC;EACF;AACF","names":["axios","Client","name","props","user_id","Number","user_handle","String","data","user_profile","barks","has_barks","barked","has_barked","mounted","getUserBarks","methods","getBarks","getBarked","deleteBark","barker","created","self","delete","console","log","intId","res","get","res_barked","barkTime","timestamp","split","date","time"],"sourceRoot":"","sources":["/Users/jscarpelli/ga_seir919/projects/musical_pursuit/musicial_pursuit_front/musical_pursuit/src/components/UserBarks.vue"],"sourcesContent":["<template>\n  <div class=\"profile-space\">\n    <div class=\"user-info\">\n      <h1 class=\"bark-title\">RockDogs are barking!</h1>\n    </div>\n    <div class=\"user-barks\">\n      <div class=\"barks-container\">\n        <div class=\"barks-display\" :key=\"bark.id\" v-for=\"bark in barks\">\n          <h3 @click=\"deleteBark(bark.barked, bark.createdAt, false)\" class=\"x\">x</h3>\n          <h4 class=\"bark-head\">From: <b>{{ bark.handle }}</b></h4>\n          <p>{{ bark.bark }}</p>\n          <h6>{{ barkTime(bark.createdAt) }}</h6>\n          <button @click=\"this.$router.push(`/newbark/${bark.id}/${bark.handle}`)\">Bark Back!</button>\n        </div>\n      </div>\n      <div class=\"user-info\">\n        <h2 class=\"bark-title yours\">your barks...</h2>\n      </div>\n      <div class=\"barked-container\">\n        <div class=\"barks-display\" :key=\"bark.id\" v-for=\"bark in barked\">\n          <h3 @click=\"deleteBark(bark.barked, bark.createdAt, true)\" class=\"x\">x</h3>\n          <h4 class=\"barked-head\">To: <b>{{ bark.handle }} </b></h4>\n          <p>{{ bark.bark }}</p>\n          <h6>{{ barkTime(bark.createdAt) }}</h6>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport Client from '../services/api'\n\nexport default {\n  name: 'UserBarks',\n  props: {\n    user_id: Number,\n    user_handle: String\n  },\n  data: () => ({\n    user_profile: {},\n    barks: [],\n    has_barks: false,\n    barked: [],\n    has_barked: false\n  }),\n  mounted() {\n    this.getUserBarks()\n  },\n  methods: {\n    async getUserBarks() {\n      // const intId = this.user_id\n      // const res = await axios.get(`http://localhost:3001/api/user/userbarked/${intId}`)\n      // this.user_profile = res.data\n      // console.log(res)\n      // this.barks = res.data\n      this.getBarks()\n      this.getBarked()\n    },\n    async deleteBark(barker, created, self) {\n      await Client.delete(`bark/${barker}/${created}`)\n      console.log(created)\n      console.log(barker)\n      if (self) {\n        this.getBarked()\n      } else {\n        this.getBarks()\n      }\n    },\n    async getBarks() {\n      const intId = this.user_id\n      // const res = await axios.get(`http://localhost:3001/api/user/userbarked/${intId}`)\n      const res = await axios.get(`https://rockdog-trivia-server.herokuapp.com/api/user/userbarker/${intId}`)\n      this.user_profile = res.data\n      console.log(res)\n      this.barks = res.data\n    },\n    async getBarked() {\n      const intId = this.user_id\n      // const res_barked = await axios.get(`http://localhost:3001/api/user/userbarker/${intId}`)\n      const res_barked = await axios.get(`https://rockdog-trivia-server.herokuapp.com/api/user/userbarked/${intId}`)\n      console.log(res_barked)\n      this.barked = res_barked.data\n    },\n\n    // async getUserBarks() {\n    //   const intId = this.user_id\n    //   // const Id = intId.toString()\n    //   const res = await axios.get(`http://localhost:3001/api/user/userbarked/${intId}`)\n    //   this.user_profile = res.data\n    //   this.barks = res.data.barked\n    //   const res_barked = await axios.get(`http://localhost:3001/api/user/userbarker/${intId}`)\n    //   console.log(res_barked)\n    //   this.barked = res_barked.data.barker\n    // },\n    barkTime(timestamp) {\n      let split = timestamp.split(/[T:]/)\n      let date = `${split[0]}`\n      let time = `${split[1]}:${split[2]}`\n      return `Barked at ${time} on ${date}`\n    }\n  }\n}\n</script>\n\n\n<style scoped>\nbutton {\n  font-family: Commissioner;\n  width: 40vw;\n  height: 4vh;\n  background-color: rgba(227, 247, 247, 0.467);\n  border-radius: 8px;\n  margin: 1vh 1vw;\n  text-align: center;\n}\n\n.barks-container,\n.barked-container {\n  display: flex;\n  align-content: flex-end;\n  flex-wrap: nowrap;\n  overflow-x: auto;\n  margin: 2vw\n}\n\n.barks-display {\n  flex: 0 0 auto;\n  padding: 1vh 3vw;\n  text-align: center;\n  margin: 2vh 4vw 2vh 6vw;\n  box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.347);\n  border-radius: 6px;\n  background-color: rgba(240, 255, 255, 0.195);\n  width: 50vw;\n  height: 21vh;\n  overflow: scroll;\n}\n\na {\n  color: #42b983;\n}\n\n.bark {\n  margin-top: 2vh;\n  margin-bottom: 0;\n}\n\n.bark-head,\n.bark-head-lvl {\n  display: inline;\n}\n\n.bark-head-lvl {\n  margin-left: 4vw;\n  color: black;\n}\n\nh2,\nh3,\nh3,\nh4,\nh5,\nh6 {\n  margin: 0;\n}\n\np {\n  margin-top: 1vh;\n  margin-bottom: 0;\n  color: black;\n  background-color: rgba(128, 128, 128, 0.559);\n  padding: 2vw;\n  width: 44vw;\n  height: 7vh;\n}\n\n.bark-title {\n  text-align: left;\n  color: azure;\n  text-shadow: 3px 3px 4px rgba(0, 0, 0, 0.647);\n  margin: 1vh 4vw;\n}\n\n.user-info {\n  border-top: 1px solid black;\n  margin: 3vh 3vw 0 3vw;\n}\n\n.x {\n  display: block;\n  float: left;\n  margin: -1vh 0 0 -2vw;\n  padding: 0;\n  text-align: center;\n  font-style: normal;\n  color: rgba(0, 0, 0, 0.168);\n  cursor: pointer;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}