{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"printed-question-div\"\n};\nconst _hoisted_2 = {\n  class: \"printed-question\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = [\"value\"];\nconst _hoisted_5 = [\"value\"];\nconst _hoisted_6 = [\"value\"];\nconst _hoisted_7 = [\"value\"];\nconst _hoisted_8 = {\n  key: 1\n};\nconst _hoisted_9 = [\"value\"];\nconst _hoisted_10 = [\"value\"];\nconst _hoisted_11 = [\"value\"];\nconst _hoisted_12 = [\"value\"];\nconst _hoisted_13 = {\n  key: 2\n};\nconst _hoisted_14 = [\"value\"];\nconst _hoisted_15 = [\"value\"];\nconst _hoisted_16 = [\"value\"];\nconst _hoisted_17 = {\n  key: 3\n};\nconst _hoisted_18 = [\"value\"];\nconst _hoisted_19 = [\"value\"];\nconst _hoisted_20 = [\"value\"];\nconst _hoisted_21 = [\"value\"];\nconst _hoisted_22 = {\n  class: \"choice\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h2\", null, \"Round \" + _toDisplayString($props.roundNum), 1 /* TEXT */), _ctx.show_question ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"p\", _hoisted_2, _toDisplayString(_ctx.question), 1 /* TEXT */), _ctx.q_type === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"form\", null, [_createElementVNode(\"label\", null, _toDisplayString(_ctx.years[0]), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.pick = $event),\n    id: \"years1\",\n    value: _ctx.years[0]\n  }, null, 8 /* PROPS */, _hoisted_4), [[_vModelCheckbox, _ctx.pick]]), _createElementVNode(\"label\", null, _toDisplayString(_ctx.years[1]), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.pick = $event),\n    id: \"years1\",\n    value: _ctx.years[1]\n  }, null, 8 /* PROPS */, _hoisted_5), [[_vModelCheckbox, _ctx.pick]]), _createElementVNode(\"label\", null, _toDisplayString(_ctx.years[2]), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.pick = $event),\n    id: \"years2\",\n    value: _ctx.years[2]\n  }, null, 8 /* PROPS */, _hoisted_6), [[_vModelCheckbox, _ctx.pick]]), _createElementVNode(\"label\", null, _toDisplayString(_ctx.years[3]), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.pick = $event),\n    id: \"years3\",\n    value: _ctx.years[3]\n  }, null, 8 /* PROPS */, _hoisted_7), [[_vModelCheckbox, _ctx.pick]])])])) : _createCommentVNode(\"v-if\", true), _ctx.q_type === 1 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"form\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.pick = $event),\n    value: _ctx.years[0]\n  }, null, 8 /* PROPS */, _hoisted_9), [[_vModelCheckbox, _ctx.pick]]), _createElementVNode(\"label\", null, _toDisplayString(_ctx.years[0]), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => _ctx.pick = $event),\n    value: _ctx.first\n  }, null, 8 /* PROPS */, _hoisted_10), [[_vModelCheckbox, _ctx.pick]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => _ctx.pick = $event),\n    value: _ctx.first\n  }, null, 8 /* PROPS */, _hoisted_11), [[_vModelCheckbox, _ctx.pick]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => _ctx.pick = $event),\n    value: _ctx.first\n  }, null, 8 /* PROPS */, _hoisted_12), [[_vModelCheckbox, _ctx.pick]])])])) : _createCommentVNode(\"v-if\", true), _ctx.q_type === 2 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createElementVNode(\"form\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => _ctx.pick = $event),\n    id: \"Single\",\n    value: _ctx.Single\n  }, null, 8 /* PROPS */, _hoisted_14), [[_vModelCheckbox, _ctx.pick]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => _ctx.pick = $event),\n    id: \"Album\",\n    value: _ctx.Album\n  }, null, 8 /* PROPS */, _hoisted_15), [[_vModelCheckbox, _ctx.pick]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => _ctx.pick = $event),\n    id: \"Neither\",\n    value: _ctx.Neither\n  }, null, 8 /* PROPS */, _hoisted_16), [[_vModelCheckbox, _ctx.pick]])])])) : _createCommentVNode(\"v-if\", true), _ctx.q_type === 3 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [_createElementVNode(\"form\", null, [_createElementVNode(\"label\", null, _toDisplayString(_ctx.current_labels[0]), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => _ctx.pick1 = $event),\n    id: \"current_labels[0]\",\n    value: _ctx.current_labels[0]\n  }, null, 8 /* PROPS */, _hoisted_18), [[_vModelCheckbox, _ctx.pick1]]), _createElementVNode(\"label\", null, _toDisplayString(_ctx.current_labels[1]), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[12] || (_cache[12] = $event => _ctx.pick2 = $event),\n    id: \"current_labels[1]\",\n    value: _ctx.current_labels[1]\n  }, null, 8 /* PROPS */, _hoisted_19), [[_vModelCheckbox, _ctx.pick2]]), _createElementVNode(\"label\", null, _toDisplayString(_ctx.current_labels[2]), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[13] || (_cache[13] = $event => _ctx.pick3 = $event),\n    id: \"current_labels[2]\",\n    value: _ctx.current_labels[2]\n  }, null, 8 /* PROPS */, _hoisted_20), [[_vModelCheckbox, _ctx.pick3]]), _createElementVNode(\"label\", null, _toDisplayString(_ctx.current_labels[3]), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[14] || (_cache[14] = $event => _ctx.pick4 = $event),\n    id: \"current_labels[3]\",\n    value: _ctx.current_labels[3]\n  }, null, 8 /* PROPS */, _hoisted_21), [[_vModelCheckbox, _ctx.pick4]])]), _createElementVNode(\"h3\", _hoisted_22, _toDisplayString(_ctx.pick), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":"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","names":["class","_createElementBlock","_createElementVNode","$props","_ctx","_hoisted_1","_hoisted_2","type","id","value","_hoisted_22"],"sourceRoot":"","sources":["/Users/jscarpelli/ga_seir919/projects/musical_pursuit/musicial_pursuit_front/musical_pursuit/src/components/GameComponents/Question.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Round {{ roundNum }} </h2>\n    <div v-if=\"show_question\" class=\"printed-question-div\">\n      <p class=\"printed-question\">{{ question }}</p>\n      <div v-if=\"q_type === 0\">\n        <form>\n          <label>{{ years[0] }}</label>\n          <input type=\"checkbox\" v-model=\"pick\" id=\"years1\" :value=\"years[0]\" />\n          <label>{{ years[1] }}</label>\n          <input type=\"checkbox\" v-model=\"pick\" id=\"years1\" :value=\"years[1]\" />\n          <label>{{ years[2] }}</label>\n          <input type=\"checkbox\" v-model=\"pick\" id=\"years2\" :value=\"years[2]\" />\n          <label>{{ years[3] }}</label>\n          <input type=\"checkbox\" v-model=\"pick\" id=\"years3\" :value=\"years[3]\" />\n        </form>\n      </div>\n      <div v-if=\"q_type === 1\">\n        <form>\n          <input type=\"checkbox\" v-model=\"pick\" :value=\"years[0]\" />\n          <label>{{ years[0] }}</label>\n          <input type=\"checkbox\" v-model=\"pick\" :value=\"first\" />\n          <input type=\"checkbox\" v-model=\"pick\" :value=\"first\" />\n          <input type=\"checkbox\" v-model=\"pick\" :value=\"first\" />\n        </form>\n      </div>\n      <div v-if=\"q_type === 2\">\n        <form>\n          <input type=\"checkbox\" v-model=\"pick\" id=\"Single\" :value=\"Single\" />\n          <input type=\"checkbox\" v-model=\"pick\" id=\"Album\" :value=\"Album\" />\n          <input type=\"checkbox\" v-model=\"pick\" id=\"Neither\" :value=\"Neither\" />\n        </form>\n      </div>\n      <div v-if=\"q_type === 3\">\n        <form>\n          <label>{{ current_labels[0] }}</label>\n          <input type=\"checkbox\" v-model=\"pick1\" id=\"current_labels[0]\" :value=\"current_labels[0]\" />\n          <label>{{ current_labels[1] }}</label>\n          <input type=\"checkbox\" v-model=\"pick2\" id=\"current_labels[1]\" :value=\"current_labels[1]\" />\n          <label>{{ current_labels[2] }}</label>\n          <input type=\"checkbox\" v-model=\"pick3\" id=\"current_labels[2]\" :value=\"current_labels[2]\" />\n          <label>{{ current_labels[3] }}</label>\n          <input type=\"checkbox\" v-model=\"pick4\" id=\"current_labels[3]\" :value=\"current_labels[3]\" />\n        </form>\n        <h3 class=\"choice\">{{ pick }}</h3>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\n// import { number } from 'prop-types'\n\nexport default {\n  name: 'QuestionCard',\n  props: {\n    artistAlbumInfo: Object,\n    artistStartYr: String,\n    roundNum: Number\n  },\n  data: () => ({\n    pick1: \"\",\n    pick2: \"\",\n    pick3: \"\",\n    pick4: \"\",\n    // pick: \"\",\n    q_type: 9,\n    round_one: 50,\n    round_two: 100,\n    round_three: 150,\n    question: \"\",\n    cur_answer: \"\",\n    show_question: false,\n    possible_labels: [\"Interscope Records\", \"Capitol Records\", \"Cool Dog Records\", \"4-AD\", \"Hyperbole Records\", \"Flammable Records\", \"Truth & Lies Records\", \"Elektra Records\", \"MetalScope Records\", \"FreeZone Records\"],\n    current_labels: [],\n    years: [],\n    album_titles: [],\n    choices_record_labels: [],\n\n  }),\n  mounted() {\n    this.createQuestion(4)\n  },\n  methods: {\n    coreectAns(value1, value2) {\n      this.$emit('correct', value1, value2)\n    },\n    incorrectAns() {\n      this.$emit('incorrect')\n    },\n    checkAnswer() {\n      console.log('check answer')\n    },\n    createQuestion(questions) {\n      ///establish data for question\n      ///generate random numbers to choose data\n      ///artist name\n      let artist = this.artistAlbumInfo.album[0].strArtist\n      ///album at random\n      let albumIdx = Math.floor(Math.random() * this.artistAlbumInfo.album.length)\n      let album = this.artistAlbumInfo.album[albumIdx].strAlbum\n      ///release year of that album\n      let yearInt = this.artistAlbumInfo.album[albumIdx].intYearReleased\n      let year = yearInt.toString()\n      ///what type of question? 0,1,2,3\n      let questionType = Math.floor(Math.random() * questions)\n      ///Determin syntax for question\n      if (questionType === 0) {\n        this.questions = `What year was their album \"${album}\" released?`\n      } else if (questionType === 1) {\n        this.question = `What album did ${artist} release in the year ${year}?`\n      } else if (questionType === 2) {\n        this.question = `Was the album \"${album}\"\" released as a full album or as a single?`\n      } else if (questionType === 3) {\n        if (this.artistAlbumInfo.album[albumIdx].strLabel !== null) {\n          this.question = `What label was their album \"${album}\" released on?`\n        } else {\n          this.createQuestion(3)\n        }\n      }\n      if (this.question !== \"\") {\n        this.show_question = true\n        this.showQuestion(questionType, albumIdx)\n      }\n    },\n    showQuestion(type, albumIndex) {\n      console.log(albumIndex)\n      console.log(type)\n      if (type === 0) {\n        let artistStart = parseInt(this.artistStartYr)\n        let releaseYr = parseInt(this.artistAlbumInfo.album[albumIndex].intYearReleased)\n        let years = [releaseYr]\n        this.cur_answer = releaseYr\n        let yrDiff = 2022 - artistStart\n        const randYear = () => {\n          let num = Math.floor(Math.random() * yrDiff)\n          if (years.includes(num)) {\n            randYear()\n          } else {\n            years.push(num)\n          }\n        }\n        for (let i = 0; i < 3; i++) {\n          randYear()\n        }\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * years.length)\n          this.years.push(years[num])\n          years.splice(num, 1)\n        }\n        console.log(years)\n      } else if (type === 1) {\n        console.log('question type 1')\n      } else if (type === 2) {\n        console.log('question type 2')\n      } else if (type === 3) {\n        console.log('question type 3')\n        ///set answer\n        this.cur_answer = this.artistAlbumInfo.album[albumIndex].strLabel\n        ///add answer to answer choices\n        let pre_current_labels = []\n        pre_current_labels.push(this.artistAlbumInfo.album[albumIndex].strLabel)\n        ///add three wrong answers\n        for (let i = 0; i < 3; i++) {\n          let num = Math.floor(Math.random() * this.possible_labels.length - 1)\n          pre_current_labels.push(this.possible_labels[num])\n          this.possible_labels.splice(num, 1)\n        }\n        ///randomly choose from the previous array to place in final answers array\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * pre_current_labels.length)\n          this.current_labels.push(pre_current_labels[num])\n          pre_current_labels.splice(num, 1)\n        }\n      }\n      this.q_type = type\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}