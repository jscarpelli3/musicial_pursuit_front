{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = process.env.VUE_APP_AUDIODB_KEY;\nimport Question from './Question.vue';\nimport Client from '../../services/api';\nexport default {\n  name: 'GameMain',\n  components: {\n    Question\n  },\n  props: {\n    user: Object\n  },\n  data: () => ({\n    searchQuery: \"\",\n    artist_image_src: \"\",\n    artist_start_yr: \"\",\n    searchResults: {},\n    searched: false,\n    search_fail: false,\n    round: 0,\n    ses_score: 0,\n    level_up: 0\n  }),\n  mounted() {\n    this.printStats();\n  },\n  methods: {\n    async getAlbums(e) {\n      e.preventDefault();\n      const res = await axios.get(`https://theaudiodb.com/api/v1/json/${API_KEY}/searchalbum.php?s=${this.searchQuery}`);\n      console.log(res.data);\n      if (res.album) {\n        this.searchResults = res.data;\n        this.searched = true;\n        this.makeImagePath();\n      } else {\n        this.search_fail = true;\n      }\n    },\n    handleChange(event) {\n      this.searchQuery = event.target.value;\n    },\n    async makeImagePath() {\n      const res = await axios.get(`https://theaudiodb.com/api/v1/json/${API_KEY}/search.php?s=${this.searchQuery}`);\n      this.artist_start_yr = res.data.artists[0].intFormedYear;\n      this.artist_image_src = res.data.artists[0].strArtistLogo;\n    },\n    start_round() {\n      if (this.round < 3) {\n        this.round++;\n      } else {\n        this.round = 50;\n      }\n    },\n    correct(points, lvl) {\n      this.ses_score += points;\n      this.level_up += lvl;\n      this.submit_scores();\n      this.start_round();\n    },\n    incorrect() {\n      this.ses_score -= 50;\n      this.submit_scores();\n      this.round = 100;\n    },\n    async submit_scores() {\n      const newTotal = parseInt(this.user.total_score) + this.ses_score;\n      const newLvl = parseInt(this.user.current_level) + this.level_up;\n      let newAllTime = 3;\n      let newSesScore = parseInt(this.user.high_ses_score);\n      if (parseInt(this.user.alltime_level) < newLvl) {\n        console.log(newAllTime);\n        newAllTime = newLvl;\n      }\n      if (parseInt(this.user.high_ses_score) < this.ses_score) {\n        console.log(newSesScore);\n        newSesScore = newTotal;\n      }\n      const newStats = {\n        current_level: newLvl,\n        total_score: newTotal,\n        alltime_level: newAllTime,\n        high_ses_score: newSesScore\n      };\n      await Client.put(`/user/${this.user.id}`, newStats);\n    },\n    printStats() {\n      console.log(this.user.high_ses_score);\n      console.log(this.user.total_score);\n      console.log(this.user.alltime_level);\n      console.log(this.user.current_level);\n      console.log(this.user.id);\n    },\n    toggleSearchFail() {\n      this.searchFail = false;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","API_KEY","process","env","VUE_APP_AUDIODB_KEY","Question","Client","name","components","props","user","Object","data","searchQuery","artist_image_src","artist_start_yr","searchResults","searched","search_fail","round","ses_score","level_up","mounted","printStats","methods","getAlbums","e","preventDefault","res","get","console","log","album","makeImagePath","handleChange","event","target","value","artists","intFormedYear","strArtistLogo","start_round","correct","points","lvl","submit_scores","incorrect","newTotal","parseInt","total_score","newLvl","current_level","newAllTime","newSesScore","high_ses_score","alltime_level","newStats","put","id","toggleSearchFail","searchFail"],"sourceRoot":"","sources":["/Users/jscarpelli/ga_seir919/projects/musical_pursuit/musicial_pursuit_front/musical_pursuit/src/components/GameComponents/GameMain.vue"],"sourcesContent":["<template>\n  <div>\n    <div v-if=\"round === 0\" class=\"game-details\">\n      <h1 class=\"headline\">Get your rock brain ready!</h1>\n      <p class=\"game-ex\">RockDog Trivia works in rounds of 3 quetsions.<br />Search an rock or pop artist you think you\n        know, then answer 3 questions about their discography. Each question gets you points. If you answer all 3\n        correct you will increase your level. </p>\n    </div>\n    <div v-if=\"!searched\" class=\"search\">\n      <form @submit=\"getAlbums\">\n        <input placeholder=\"Search Term\" @change=\"handleChange\" :value=\"searchQuery\" name=\"search\" type=\"text\"\n          :disabled=\"search_fail\" />\n        <button>Search</button>\n      </form>\n      <div v-if=\"search_fail\">\n        <h2>Invaldi Artist Name!</h2>\n        <button @click=\"toggleSearchFail\">Click to search again</button>\n      </div>\n    </div>\n    <div v-else class=\"cur-artist\">\n      <h2 v-if=\"round === 0\">Get ready to answer questions about {{ searchResults.album[0].strArtist }}!</h2>\n      <img class=\"artist-logo\" :src=\"artist_image_src\" /><br />\n      <button v-if=\"round === 0\" class=\"go-btn\" @click=\"start_round\">GO!</button>\n    </div>\n    <div v-if=\"round === 1\" class=\"round-one-q\">\n      <Question :user=\"user\" :artistAlbumInfo=\"searchResults\" @correct=\"correct\" @incorrect=\"incorrect\"\n        :roundNum=\"round\" :artistStartYr=\"artist_start_yr\" />\n    </div>\n    <div v-if=\"round === 2\" class=\"round-two-q\">\n      <Question :user=\"user\" :artistAlbumInfo=\"searchResults\" @correct=\"correct\" @incorrect=\"incorrect\"\n        :roundNum=\"round\" :artistStartYr=\"artist_start_yr\" />\n    </div>\n    <div v-if=\"round === 3\" class=\"round-three-q\">\n      <Question :user=\"user\" :artistAlbumInfo=\"searchResults\" @correct=\"correct\" @incorrect=\"incorrect\"\n        :roundNum=\"round\" :artistStartYr=\"artist_start_yr\" />\n    </div>\n    <div v-if=\"round === 50\" class=\"round-three-q\">\n      <h1>You leveled up!</h1>\n      <h3>This round you scored {{ ses_score }}!</h3>\n      <button @click=\"this.$router.push(`/dashboard`)\">Back To You Dashboard</button>\n    </div>\n    <div v-if=\"round === 100\" class=\"round-three-q\">\n      <h1>Sorry, wrong answer!</h1>\n      <h3>You Lose 50 points!</h3>\n      <button @click=\"this.$router.push(`/dashboard`)\">Back To You Dashboard</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nconst API_KEY = process.env.VUE_APP_AUDIODB_KEY\nimport Question from './Question.vue'\nimport Client from '../../services/api'\n\nexport default {\n  name: 'GameMain',\n  components: { Question },\n  props: {\n    user: Object\n  },\n  data: () => ({\n    searchQuery: \"\",\n    artist_image_src: \"\",\n    artist_start_yr: \"\",\n    searchResults: {},\n    searched: false,\n    search_fail: false,\n    round: 0,\n    ses_score: 0,\n    level_up: 0\n  }),\n  mounted() {\n    this.printStats()\n  },\n  methods: {\n    async getAlbums(e) {\n      e.preventDefault();\n      const res = await axios.get(`https://theaudiodb.com/api/v1/json/${API_KEY}/searchalbum.php?s=${this.searchQuery}`);\n      console.log(res.data)\n      if (res.album) {\n        this.searchResults = res.data;\n        this.searched = true\n        this.makeImagePath()\n      } else {\n        this.search_fail = true\n      }\n    },\n    handleChange(event) {\n      this.searchQuery = event.target.value\n    },\n    async makeImagePath() {\n      const res = await axios.get(`https://theaudiodb.com/api/v1/json/${API_KEY}/search.php?s=${this.searchQuery}`);\n      this.artist_start_yr = res.data.artists[0].intFormedYear\n      this.artist_image_src = res.data.artists[0].strArtistLogo\n    },\n    start_round() {\n      if (this.round < 3) {\n        this.round++\n      } else {\n        this.round = 50\n      }\n    },\n    correct(points, lvl) {\n      this.ses_score += points\n      this.level_up += lvl\n      this.submit_scores()\n      this.start_round()\n    },\n    incorrect() {\n      this.ses_score -= 50\n      this.submit_scores()\n      this.round = 100\n    },\n    async submit_scores() {\n      const newTotal = parseInt(this.user.total_score) + this.ses_score\n      const newLvl = parseInt(this.user.current_level) + this.level_up\n      let newAllTime = 3\n      let newSesScore = parseInt(this.user.high_ses_score)\n      if (parseInt(this.user.alltime_level) < newLvl) {\n        console.log(newAllTime)\n        newAllTime = newLvl\n      }\n      if (parseInt(this.user.high_ses_score) < this.ses_score) {\n        console.log(newSesScore)\n        newSesScore = newTotal\n      }\n      const newStats = { current_level: newLvl, total_score: newTotal, alltime_level: newAllTime, high_ses_score: newSesScore }\n      await Client.put(`/user/${this.user.id}`, newStats)\n    },\n    printStats() {\n      console.log(this.user.high_ses_score)\n      console.log(this.user.total_score)\n      console.log(this.user.alltime_level)\n      console.log(this.user.current_level)\n      console.log(this.user.id)\n    },\n    toggleSearchFail() {\n      this.searchFail = false\n    }\n  }\n}\n\n</script>\n\n<style>\n.game-details {\n  margin: 2vh 4vw;\n  box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.347);\n  border-radius: 10px;\n  background-color: rgba(240, 255, 255, 0.195);\n  padding: 2vw;\n}\n\n.go-btn {\n  width: 60vw;\n  height: 6vh;\n  background-color: rgb(244, 118, 28);\n  text-shadow: 2px 1px 3px;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin: 0;\n}\n\n.artist-logo {\n  width: 90vw;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}