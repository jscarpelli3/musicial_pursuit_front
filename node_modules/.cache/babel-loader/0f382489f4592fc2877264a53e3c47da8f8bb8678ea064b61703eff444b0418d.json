{"ast":null,"code":"import MdPropValidator from 'core/utils/MdPropValidator';\nimport MdTableCellSelection from './MdTableCellSelection';\nexport default {\n  name: 'MdTableRow',\n  components: {\n    MdTableCellSelection\n  },\n  props: {\n    mdIndex: [Number, String],\n    mdId: [Number, String],\n    mdSelectable: {\n      type: [String],\n      ...MdPropValidator('md-selectable', ['multiple', 'single'])\n    },\n    mdDisabled: Boolean,\n    mdAutoSelect: Boolean,\n    mdItem: [Array, Object]\n  },\n  inject: ['MdTable'],\n  data: () => ({\n    index: null\n  }),\n  computed: {\n    selectableCount() {\n      return this.MdTable.selectable.length;\n    },\n    isMultipleSelected() {\n      return this.MdTable.selectedItems.includes(this.mdItem);\n    },\n    isSingleSelected() {\n      return this.MdTable.singleSelection === this.mdItem;\n    },\n    hasMultipleSelection() {\n      return this.MdTable.hasValue && this.mdSelectable === 'multiple';\n    },\n    hasSingleSelection() {\n      return this.MdTable.hasValue && this.mdSelectable === 'single';\n    },\n    rowClasses() {\n      if (this.MdTable.hasValue) {\n        return {\n          'md-has-selection': !this.mdDisabled && (this.mdAutoSelect || this.hasSingleSelection),\n          'md-selected': this.isMultipleSelected,\n          'md-selected-single': this.isSingleSelected\n        };\n      }\n    },\n    isInSelectedItems() {\n      return this.MdTable.selectedItems.includes(this.mdItem);\n    }\n  },\n  watch: {\n    mdDisabled() {\n      if (this.mdDisabled) {\n        this.removeSelectableItem();\n      } else {\n        this.addSelectableItem();\n      }\n    },\n    mdSelectable() {\n      this.MdTable.selectingMode = this.mdSelectable;\n    },\n    mdItem(after, before) {\n      this.removeSelectableItem(before);\n      this.$nextTick(this.addSelectableItem);\n    }\n  },\n  methods: {\n    onClick() {\n      if (this.MdTable.hasValue && !this.mdDisabled) {\n        if (this.hasMultipleSelection) {\n          this.selectRowIfMultiple();\n        } else if (this.hasSingleSelection) {\n          this.selectRowIfSingle();\n        }\n      }\n    },\n    toggleSelection() {\n      this.MdTable.manageItemSelection(this.mdItem);\n    },\n    addSelection() {\n      if (!this.isMultipleSelected) {\n        this.MdTable.selectedItems = this.MdTable.selectedItems.concat([this.mdItem]);\n      }\n    },\n    removeSelection() {\n      if (this.isMultipleSelected) {\n        this.MdTable.selectedItems = this.MdTable.selectedItems.filter(target => target !== this.mdItem);\n      }\n    },\n    selectRowIfSingle() {\n      if (this.MdTable.singleSelection === this.mdItem) {\n        this.MdTable.singleSelection = null;\n      } else {\n        this.MdTable.singleSelection = this.mdItem;\n      }\n    },\n    selectRowIfMultiple() {\n      if (this.mdAutoSelect) {\n        this.toggleSelection();\n      }\n    },\n    addSelectableItem() {\n      if (!this.hasMultipleSelection || this.mdDisabled) {\n        return false;\n      }\n      if (this.MdTable.selectable.includes(this.mdItem)) {\n        return false;\n      }\n      this.MdTable.selectable = this.MdTable.selectable.concat([this.mdItem]);\n    },\n    removeSelectableItem(target = this.mdItem) {\n      if (this.mdSelectable === 'multiple') {\n        this.MdTable.selectable = this.MdTable.selectable.filter(item => item !== target);\n      }\n    }\n  },\n  created() {\n    this.$nextTick(() => {\n      this.addSelectableItem();\n      this.MdTable.selectingMode = this.mdSelectable;\n    });\n  },\n  beforeDestroy() {\n    this.removeSelectableItem();\n  }\n};","map":{"version":3,"mappings":"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","names":["MdPropValidator","MdTableCellSelection","name","components","props","mdIndex","Number","String","mdId","mdSelectable","type","mdDisabled","Boolean","mdAutoSelect","mdItem","Array","Object","inject","data","index","computed","selectableCount","MdTable","selectable","length","isMultipleSelected","selectedItems","includes","isSingleSelected","singleSelection","hasMultipleSelection","hasValue","hasSingleSelection","rowClasses","isInSelectedItems","watch","removeSelectableItem","addSelectableItem","selectingMode","after","before","$nextTick","methods","onClick","selectRowIfMultiple","selectRowIfSingle","toggleSelection","manageItemSelection","addSelection","concat","removeSelection","filter","target","item","created","beforeDestroy"],"sourceRoot":"","sources":["/Users/jscarpelli/ga_seir919/projects/musical_pursuit/musicial_pursuit_front/musical_pursuit/src/components/MdTable/MdTableRow.vue"],"sourcesContent":["<template>\n  <tr class=\"md-table-row\" :class=\"rowClasses\" @click=\"onClick\" v-on=\"$listeners\">\n    <md-table-cell-selection\n      :value=\"isMultipleSelected\"\n      @input=\"selected => selected ? addSelection() : removeSelection()\"\n      :md-disabled=\"mdDisabled\"\n      :md-selectable=\"mdSelectable === 'multiple'\"\n      :md-row-id=\"mdIndex\"\n      v-if=\"selectableCount\" />\n    <slot />\n  </tr>\n</template>\n\n<script>\n  import MdPropValidator from 'core/utils/MdPropValidator'\n  import MdTableCellSelection from './MdTableCellSelection'\n\n  export default {\n    name: 'MdTableRow',\n    components: {\n      MdTableCellSelection\n    },\n    props: {\n      mdIndex: [Number, String],\n      mdId: [Number, String],\n      mdSelectable: {\n        type: [String],\n        ...MdPropValidator('md-selectable', ['multiple', 'single'])\n      },\n      mdDisabled: Boolean,\n      mdAutoSelect: Boolean,\n      mdItem: [Array, Object]\n    },\n    inject: ['MdTable'],\n    data: () => ({\n      index: null\n    }),\n    computed: {\n      selectableCount () {\n        return this.MdTable.selectable.length\n      },\n      isMultipleSelected () {\n        return this.MdTable.selectedItems.includes(this.mdItem)\n      },\n      isSingleSelected () {\n        return this.MdTable.singleSelection === this.mdItem\n      },\n      hasMultipleSelection () {\n        return this.MdTable.hasValue && this.mdSelectable === 'multiple'\n      },\n      hasSingleSelection () {\n        return this.MdTable.hasValue && this.mdSelectable === 'single'\n      },\n      rowClasses () {\n        if (this.MdTable.hasValue) {\n          return {\n            'md-has-selection': !this.mdDisabled && (this.mdAutoSelect || this.hasSingleSelection),\n            'md-selected': this.isMultipleSelected,\n            'md-selected-single': this.isSingleSelected\n          }\n        }\n      },\n      isInSelectedItems () {\n        return this.MdTable.selectedItems.includes(this.mdItem)\n      }\n    },\n    watch: {\n      mdDisabled () {\n        if (this.mdDisabled) {\n          this.removeSelectableItem()\n        } else {\n          this.addSelectableItem()\n        }\n      },\n      mdSelectable () {\n        this.MdTable.selectingMode = this.mdSelectable\n      },\n      mdItem (after, before) {\n        this.removeSelectableItem(before)\n        this.$nextTick(this.addSelectableItem)\n      }\n    },\n    methods: {\n      onClick () {\n        if (this.MdTable.hasValue && !this.mdDisabled) {\n          if (this.hasMultipleSelection) {\n            this.selectRowIfMultiple()\n          } else if (this.hasSingleSelection) {\n            this.selectRowIfSingle()\n          }\n        }\n      },\n      toggleSelection () {\n        this.MdTable.manageItemSelection(this.mdItem)\n      },\n      addSelection () {\n        if (!this.isMultipleSelected) {\n          this.MdTable.selectedItems = this.MdTable.selectedItems.concat([this.mdItem])\n        }\n      },\n      removeSelection () {\n        if (this.isMultipleSelected) {\n          this.MdTable.selectedItems = this.MdTable.selectedItems.filter(target => target !== this.mdItem)\n        }\n      },\n      selectRowIfSingle () {\n        if (this.MdTable.singleSelection === this.mdItem) {\n          this.MdTable.singleSelection = null\n        } else {\n          this.MdTable.singleSelection = this.mdItem\n        }\n      },\n      selectRowIfMultiple () {\n        if (this.mdAutoSelect) {\n          this.toggleSelection()\n        }\n      },\n      addSelectableItem () {\n        if (!this.hasMultipleSelection || this.mdDisabled) {\n          return false\n        }\n\n        if (this.MdTable.selectable.includes(this.mdItem)) {\n          return false\n        }\n\n        this.MdTable.selectable = this.MdTable.selectable.concat([this.mdItem])\n      },\n      removeSelectableItem (target = this.mdItem) {\n        if (this.mdSelectable === 'multiple') {\n          this.MdTable.selectable = this.MdTable.selectable.filter(item => item !== target)\n        }\n      }\n    },\n    created () {\n      this.$nextTick(() => {\n        this.addSelectableItem()\n        this.MdTable.selectingMode = this.mdSelectable\n      })\n    },\n    beforeDestroy () {\n      this.removeSelectableItem()\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n  @import \"~components/MdAnimation/variables\";\n\n  .md-table-row {\n    transition: .3s $md-transition-default-timing;\n    transition-property: background-color, font-weight;\n    will-change: background-color, font-weight;\n\n    &.md-has-selection {\n      cursor: pointer;\n    }\n\n    &.md-selected-single {\n      font-weight: 500;\n    }\n\n    tbody & td {\n      border-top: 1px solid;\n    }\n  }\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}