{"ast":null,"code":"import raf from 'raf';\nimport MdTagSwitcher from 'components/MdTagSwitcher/MdTagSwitcher';\nimport MdUuid from 'core/utils/MdUuid';\nimport MdPropValidator from 'core/utils/MdPropValidator';\nimport MdTableThead from './MdTableThead';\nimport MdTableAlternateHeader from './MdTableAlternateHeader';\nimport MdTableRow from './MdTableRow';\nimport MdTableRowGhost from './MdTableRowGhost';\nimport MdTableCellSelection from './MdTableCellSelection';\nimport MdResizeObserver from 'core/utils/MdResizeObserver';\nconst getObjectAttribute = (object, key) => {\n  let value = object;\n  for (let attribute of key.split('.')) {\n    value = value[attribute];\n  }\n  return value;\n};\nexport default {\n  name: 'MdTable',\n  components: {\n    MdTagSwitcher,\n    MdTableAlternateHeader,\n    MdTableThead,\n    MdTableRow,\n    MdTableRowGhost,\n    MdTableCellSelection\n  },\n  props: {\n    value: [Array, Object],\n    mdModelId: {\n      type: String,\n      default: 'id'\n    },\n    mdCard: Boolean,\n    mdFixedHeader: Boolean,\n    mdHeight: {\n      type: [Number, String],\n      default: 400\n    },\n    mdSort: String,\n    mdSortOrder: {\n      type: String,\n      default: 'asc',\n      ...MdPropValidator('md-sort-order', ['asc', 'desc'])\n    },\n    mdSortFn: {\n      type: Function,\n      default(value) {\n        const sortBy = this.MdTable.sort;\n        const isAsc = this.MdTable.sortOrder === 'asc';\n        const multiplier = isAsc ? 1 : -1;\n\n        /* eslint-disable complexity */\n        const comparator = function (a, b) {\n          const aAttr = getObjectAttribute(a, sortBy);\n          const bAttr = getObjectAttribute(b, sortBy);\n          if (aAttr === bAttr) {\n            return 0;\n          } else if (aAttr === null || aAttr === undefined || Number.isNaN(aAttr)) {\n            // a is last\n            return 1;\n          } else if (bAttr === null || bAttr === undefined || Number.isNaN(bAttr)) {\n            // b is last\n            return -1;\n          } else if (typeof aAttr === 'number' && typeof bAttr === 'number') {\n            // numerical compare, negate if descending\n            return (aAttr - bAttr) * multiplier;\n          }\n          // locale compare, negate if descending\n          return String(aAttr).localeCompare(String(bAttr)) * multiplier;\n        };\n        /* eslint-enable complexity */\n\n        return value.sort(comparator);\n      }\n    },\n    mdSelectedValue: {\n      type: [Array, Object]\n    }\n  },\n  data() {\n    return {\n      windowResizeObserver: null,\n      fixedHeaderTableWidth: 0,\n      fixedHeaderPadding: 0,\n      hasContentScroll: false,\n      MdTable: {\n        items: {},\n        sort: null,\n        sortOrder: null,\n        singleSelection: null,\n        selectedItems: [],\n        selectable: [],\n        fixedHeader: null,\n        contentPadding: null,\n        contentEl: null,\n        // computed\n        hasValue: this.hasValue,\n        // methods\n        emitEvent: this.emitEvent,\n        sortTable: this.sortTable,\n        manageItemSelection: this.manageItemSelection,\n        getModel: this.getModel,\n        getModelItem: this.getModelItem,\n        selectingMode: null\n      },\n      itemsUuidMap: new WeakMap()\n    };\n  },\n  computed: {\n    contentTag() {\n      if (this.mdCard) {\n        return 'md-card';\n      }\n      return 'md-content';\n    },\n    headerCount() {\n      return Object.keys(this.MdTable.items).length;\n    },\n    selectedCount() {\n      return this.MdTable.selectedItems.length;\n    },\n    headerStyles() {\n      if (this.mdFixedHeader) {\n        return `padding-right: ${this.fixedHeaderPadding}px`;\n      }\n    },\n    hasValue() {\n      return this.value && this.value.length !== 0;\n    },\n    headerClasses() {\n      if (this.mdFixedHeader && this.hasContentScroll || !this.hasValue) {\n        return 'md-table-fixed-header-active';\n      }\n    },\n    contentStyles() {\n      if (this.mdFixedHeader) {\n        const height = typeof this.mdHeight === 'number' ? `${this.mdHeight}px` : this.mdHeight;\n        return `height: ${height};max-height: ${height}`;\n      }\n    },\n    contentClasses() {\n      if (this.mdFixedHeader && this.value.length === 0) {\n        return `md-table-empty`;\n      }\n    },\n    fixedHeaderTableStyles() {\n      return {\n        width: this.fixedHeaderTableWidth + 'px'\n      };\n    }\n  },\n  provide() {\n    const MdTable = this.MdTable;\n    return {\n      MdTable\n    };\n  },\n  watch: {\n    mdSort: {\n      immediate: true,\n      handler() {\n        this.MdTable.sort = this.mdSort;\n      }\n    },\n    mdSortOrder: {\n      immediate: true,\n      handler() {\n        this.MdTable.sortOrder = this.mdSortOrder;\n      }\n    },\n    mdFixedHeader: {\n      immediate: true,\n      handler() {\n        this.MdTable.fixedHeader = this.mdFixedHeader;\n      }\n    },\n    hasValue: {\n      immediate: true,\n      handler() {\n        this.MdTable.hasValue = this.hasValue;\n      }\n    },\n    'MdTable.selectedItems'(val, old) {\n      let changed = (() => {\n        let isValEmpty = this.isEmpty(val);\n        let isOldEmpty = this.isEmpty(old);\n        let hasValues = isValEmpty && isOldEmpty;\n        if (hasValues) {\n          return false;\n        } else if (!hasValues) {\n          return val.length !== old.length ? true : !val.every((item, index) => item == old[index]);\n        }\n        return true;\n      })();\n      if (changed) {\n        this.select(val);\n      }\n    },\n    'MdTable.singleSelection'(val, old) {\n      if (val != old) {\n        this.select(val);\n      }\n    },\n    mdSelectedValue() {\n      this.syncSelectedValue();\n    },\n    value() {\n      this.syncSelectedValue();\n      this.setWidth();\n    }\n  },\n  methods: {\n    isEmpty(value) {\n      return !value || value.length === 0;\n    },\n    emitEvent(eventName, value) {\n      this.$emit(eventName, value);\n    },\n    getRowId(item, propertyName) {\n      let id = item[propertyName];\n      if (id) {\n        return id;\n      }\n      id = this.itemsUuidMap.get(item);\n      if (!id) {\n        id = 'md-row-' + MdUuid();\n        this.itemsUuidMap.set(item, id);\n      }\n      return id;\n    },\n    setScroll($event) {\n      raf(() => {\n        if (this.mdFixedHeader) {\n          this.$refs.fixedHeaderContainer.scrollLeft = $event.target.scrollLeft;\n        }\n        this.hasContentScroll = $event.target.scrollTop > 0;\n      });\n    },\n    setHeaderScroll($event) {\n      raf(() => {\n        this.MdTable.contentEl.scrollLeft = $event.target.scrollLeft;\n      });\n    },\n    getContentEl() {\n      return this.$el.querySelector('.md-table-content');\n    },\n    setContentEl() {\n      this.MdTable.contentEl = this.getContentEl();\n    },\n    setHeaderPadding() {\n      this.setContentEl();\n      const {\n        contentEl\n      } = this.MdTable;\n      const tableEl = contentEl.childNodes[0];\n      this.fixedHeaderPadding = contentEl.offsetWidth - tableEl.offsetWidth;\n    },\n    getModel() {\n      return this.value;\n    },\n    getModelItem(index) {\n      return this.value[index];\n    },\n    manageItemSelection(item) {\n      if (this.MdTable.selectedItems.includes(item)) {\n        this.MdTable.selectedItems = this.MdTable.selectedItems.filter(target => target !== item);\n      } else {\n        this.MdTable.selectedItems = this.MdTable.selectedItems.concat([item]);\n      }\n    },\n    sortTable() {\n      if (Array.isArray(this.value)) {\n        this.$emit('input', this.mdSortFn(this.value));\n      }\n    },\n    select(val) {\n      this.$emit('update:mdSelectedValue', val);\n      this.$emit('md-selected', val);\n    },\n    syncSelectedValue() {\n      this.$nextTick().then(() => {\n        // render the table first\n        if (this.MdTable.selectingMode === 'single') {\n          this.MdTable.singleSelection = this.mdSelectedValue;\n        } else if (this.MdTable.selectingMode === 'multiple') {\n          this.MdTable.selectedItems = this.mdSelectedValue || [];\n        }\n      });\n    },\n    setWidth() {\n      if (this.mdFixedHeader) {\n        this.fixedHeaderTableWidth = this.$refs.contentTable.offsetWidth;\n      }\n    }\n  },\n  created() {\n    if (this.mdSort) {\n      this.sortTable();\n    }\n    this.syncSelectedValue();\n  },\n  mounted() {\n    this.setContentEl();\n    this.$nextTick().then(this.setWidth);\n    if (this.mdFixedHeader) {\n      this.setHeaderPadding();\n      this.windowResizeObserver = new MdResizeObserver(window, this.setWidth);\n    }\n  },\n  beforeDestroy() {\n    if (this.windowResizeObserver) {\n      this.windowResizeObserver.destroy();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["raf","MdTagSwitcher","MdUuid","MdPropValidator","MdTableThead","MdTableAlternateHeader","MdTableRow","MdTableRowGhost","MdTableCellSelection","MdResizeObserver","getObjectAttribute","object","key","value","attribute","split","name","components","props","Array","Object","mdModelId","type","String","default","mdCard","Boolean","mdFixedHeader","mdHeight","Number","mdSort","mdSortOrder","mdSortFn","Function","sortBy","MdTable","sort","isAsc","sortOrder","multiplier","comparator","a","b","aAttr","bAttr","undefined","isNaN","localeCompare","mdSelectedValue","data","windowResizeObserver","fixedHeaderTableWidth","fixedHeaderPadding","hasContentScroll","items","singleSelection","selectedItems","selectable","fixedHeader","contentPadding","contentEl","hasValue","emitEvent","sortTable","manageItemSelection","getModel","getModelItem","selectingMode","itemsUuidMap","WeakMap","computed","contentTag","headerCount","keys","length","selectedCount","headerStyles","headerClasses","contentStyles","height","contentClasses","fixedHeaderTableStyles","width","provide","watch","immediate","handler","val","old","changed","isValEmpty","isEmpty","isOldEmpty","hasValues","every","item","index","select","syncSelectedValue","setWidth","methods","eventName","$emit","getRowId","propertyName","id","get","set","setScroll","$event","$refs","fixedHeaderContainer","scrollLeft","target","scrollTop","setHeaderScroll","getContentEl","$el","querySelector","setContentEl","setHeaderPadding","tableEl","childNodes","offsetWidth","includes","filter","concat","isArray","$nextTick","then","contentTable","created","mounted","window","beforeDestroy","destroy"],"sourceRoot":"","sources":["/Users/jscarpelli/ga_seir919/projects/musical_pursuit/musicial_pursuit_front/musical_pursuit/src/components/MdTable/MdTable.vue"],"sourcesContent":["<template>\n  <md-tag-switcher :md-tag=\"contentTag\" class=\"md-table\">\n    <slot name=\"md-table-toolbar\" />\n\n    <keep-alive>\n      <md-table-alternate-header v-if=\"$scopedSlots['md-table-alternate-header'] && selectedCount\">\n        <slot name=\"md-table-alternate-header\" :count=\"selectedCount\" />\n      </md-table-alternate-header>\n    </keep-alive>\n\n    <div class=\"md-table-fixed-header\" :class=\"headerClasses\" :style=\"headerStyles\" v-if=\"mdFixedHeader\">\n      <div class=\"md-table-fixed-header-container\" ref=\"fixedHeaderContainer\" @scroll=\"setHeaderScroll\">\n        <table :style=\"fixedHeaderTableStyles\">\n          <md-table-thead />\n        </table>\n      </div>\n    </div>\n\n    <md-content class=\"md-table-content md-scrollbar\" :class=\"contentClasses\" :style=\"contentStyles\" @scroll=\"setScroll\">\n      <table ref=\"contentTable\">\n        <md-table-thead :class=\"headerClasses\" v-if=\"!mdFixedHeader && $scopedSlots['md-table-row']\" />\n\n        <tbody v-if=\"!$scopedSlots['md-table-row']\">\n          <slot />\n        </tbody>\n\n        <tbody v-else-if=\"value.length\">\n          <md-table-row-ghost\n            v-for=\"(item, index) in value\"\n            :key=\"getRowId(item, mdModelId)\"\n            :md-id=\"getRowId(item, mdModelId)\"\n            :md-index=\"index\"\n            :md-item=\"item\">\n            <slot name=\"md-table-row\" :item=\"item\" :index=\"index\" />\n          </md-table-row-ghost>\n        </tbody>\n\n        <tbody v-else-if=\"$scopedSlots['md-table-empty-state']\">\n          <tr>\n            <td :colspan=\"headerCount\">\n              <slot name=\"md-table-empty-state\" />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <slot name=\"md-table-pagination\" />\n    </md-content>\n\n    <slot v-if=\"!hasValue && $scopedSlots['md-table-row']\" />\n  </md-tag-switcher>\n</template>\n\n<script>\n  import raf from 'raf'\n\n  import MdTagSwitcher from 'components/MdTagSwitcher/MdTagSwitcher'\n  import MdUuid from 'core/utils/MdUuid'\n  import MdPropValidator from 'core/utils/MdPropValidator'\n  import MdTableThead from './MdTableThead'\n  import MdTableAlternateHeader from './MdTableAlternateHeader'\n  import MdTableRow from './MdTableRow'\n  import MdTableRowGhost from './MdTableRowGhost'\n  import MdTableCellSelection from './MdTableCellSelection'\n  import MdResizeObserver from 'core/utils/MdResizeObserver'\n\n  const getObjectAttribute = (object, key) => {\n    let value = object\n\n    for (let attribute of key.split('.')) {\n      value = value[attribute]\n    }\n\n    return value\n  }\n\n  export default {\n    name: 'MdTable',\n    components: {\n      MdTagSwitcher,\n      MdTableAlternateHeader,\n      MdTableThead,\n      MdTableRow,\n      MdTableRowGhost,\n      MdTableCellSelection\n    },\n    props: {\n      value: [Array, Object],\n      mdModelId: {\n        type: String,\n        default: 'id'\n      },\n      mdCard: Boolean,\n      mdFixedHeader: Boolean,\n      mdHeight: {\n        type: [Number, String],\n        default: 400\n      },\n      mdSort: String,\n      mdSortOrder: {\n        type: String,\n        default: 'asc',\n        ...MdPropValidator('md-sort-order', ['asc', 'desc'])\n      },\n      mdSortFn: {\n        type: Function,\n        default (value) {\n          const sortBy = this.MdTable.sort\n          const isAsc = this.MdTable.sortOrder === 'asc'\n          const multiplier = isAsc ? 1 : -1\n\n          /* eslint-disable complexity */\n          const comparator = function(a, b) {\n            const aAttr = getObjectAttribute(a, sortBy)\n            const bAttr = getObjectAttribute(b, sortBy)\n\n            if (aAttr === bAttr) {\n              return 0\n            } else if (aAttr === null || aAttr === undefined || Number.isNaN(aAttr)) {\n              // a is last\n              return 1\n            } else if (bAttr === null || bAttr === undefined || Number.isNaN(bAttr)) {\n              // b is last\n              return -1\n            } else if (typeof aAttr === 'number' && typeof bAttr === 'number') {\n              // numerical compare, negate if descending\n              return (aAttr - bAttr) * multiplier\n            }\n            // locale compare, negate if descending\n            return String(aAttr).localeCompare(String(bAttr)) * multiplier\n          }\n          /* eslint-enable complexity */\n\n          return value.sort(comparator)\n        }\n      },\n      mdSelectedValue: {\n        type: [Array, Object]\n      }\n    },\n    data () {\n      return {\n        windowResizeObserver: null,\n        fixedHeaderTableWidth: 0,\n        fixedHeaderPadding: 0,\n        hasContentScroll: false,\n        MdTable: {\n          items: {},\n          sort: null,\n          sortOrder: null,\n          singleSelection: null,\n          selectedItems: [],\n          selectable: [],\n          fixedHeader: null,\n          contentPadding: null,\n          contentEl: null,\n          // computed\n          hasValue: this.hasValue,\n          // methods\n          emitEvent: this.emitEvent,\n          sortTable: this.sortTable,\n          manageItemSelection: this.manageItemSelection,\n          getModel: this.getModel,\n          getModelItem: this.getModelItem,\n          selectingMode: null\n        },\n        itemsUuidMap: new WeakMap()\n      }\n    },\n    computed: {\n      contentTag () {\n        if (this.mdCard) {\n          return 'md-card'\n        }\n\n        return 'md-content'\n      },\n      headerCount () {\n        return Object.keys(this.MdTable.items).length\n      },\n      selectedCount () {\n        return this.MdTable.selectedItems.length\n      },\n      headerStyles () {\n        if (this.mdFixedHeader) {\n          return `padding-right: ${this.fixedHeaderPadding}px`\n        }\n      },\n      hasValue () {\n        return this.value && this.value.length !== 0\n      },\n      headerClasses () {\n        if ((this.mdFixedHeader && this.hasContentScroll) || !this.hasValue) {\n          return 'md-table-fixed-header-active'\n        }\n      },\n      contentStyles () {\n        if (this.mdFixedHeader) {\n          const height = typeof this.mdHeight === 'number'\n            ? `${this.mdHeight}px`\n            : this.mdHeight\n          return `height: ${height};max-height: ${height}`\n        }\n      },\n      contentClasses () {\n        if (this.mdFixedHeader && this.value.length === 0) {\n          return `md-table-empty`\n        }\n      },\n      fixedHeaderTableStyles () {\n        return {\n          width: this.fixedHeaderTableWidth + 'px'\n        }\n      }\n    },\n    provide () {\n      const MdTable = this.MdTable\n\n      return { MdTable }\n    },\n    watch: {\n      mdSort: {\n        immediate: true,\n        handler () {\n          this.MdTable.sort = this.mdSort\n        }\n      },\n      mdSortOrder: {\n        immediate: true,\n        handler () {\n          this.MdTable.sortOrder = this.mdSortOrder\n        }\n      },\n      mdFixedHeader: {\n        immediate: true,\n        handler () {\n          this.MdTable.fixedHeader = this.mdFixedHeader\n        }\n      },\n      hasValue: {\n        immediate: true,\n        handler () {\n          this.MdTable.hasValue = this.hasValue\n        }\n      },\n      'MdTable.selectedItems' (val, old) {\n        let changed = (() => {\n          let isValEmpty = this.isEmpty(val)\n          let isOldEmpty = this.isEmpty(old)\n          let hasValues = isValEmpty && isOldEmpty\n\n          if (hasValues) {\n            return false\n          } else if (!hasValues) {\n            return (val.length !== old.length) ? true : !val.every((item, index) => item == old[index])\n          }\n\n          return true\n        })()\n\n        if (changed) {\n          this.select(val)\n        }\n      },\n      'MdTable.singleSelection' (val, old) {\n        if (val != old) {\n          this.select(val)\n        }\n      },\n      mdSelectedValue () {\n        this.syncSelectedValue()\n      },\n      value () {\n        this.syncSelectedValue()\n        this.setWidth()\n      }\n    },\n    methods: {\n      isEmpty (value) {\n        return !value || value.length === 0\n      },\n      emitEvent (eventName, value) {\n        this.$emit(eventName, value)\n      },\n      getRowId (item, propertyName) {\n        let id = item[propertyName]\n\n        if (id) {\n          return id\n        }\n\n        id = this.itemsUuidMap.get(item)\n\n        if (!id) {\n          id = 'md-row-' + MdUuid()\n          this.itemsUuidMap.set(item, id)\n        }\n\n        return id\n      },\n      setScroll ($event) {\n        raf(() => {\n          if (this.mdFixedHeader) {\n            this.$refs.fixedHeaderContainer.scrollLeft = $event.target.scrollLeft\n          }\n\n          this.hasContentScroll = $event.target.scrollTop > 0\n        })\n      },\n      setHeaderScroll ($event) {\n        raf(() => {\n          this.MdTable.contentEl.scrollLeft = $event.target.scrollLeft\n        })\n      },\n      getContentEl () {\n        return this.$el.querySelector('.md-table-content')\n      },\n      setContentEl () {\n        this.MdTable.contentEl = this.getContentEl()\n      },\n      setHeaderPadding () {\n        this.setContentEl()\n\n        const { contentEl } = this.MdTable\n        const tableEl = contentEl.childNodes[0]\n\n        this.fixedHeaderPadding = contentEl.offsetWidth - tableEl.offsetWidth\n      },\n      getModel () {\n        return this.value\n      },\n      getModelItem (index) {\n        return this.value[index]\n      },\n      manageItemSelection (item) {\n        if (this.MdTable.selectedItems.includes(item)) {\n          this.MdTable.selectedItems = this.MdTable.selectedItems.filter(target => target !== item)\n        } else {\n          this.MdTable.selectedItems = this.MdTable.selectedItems.concat([item])\n        }\n      },\n      sortTable () {\n        if (Array.isArray(this.value)) {\n          this.$emit('input', this.mdSortFn(this.value))\n        }\n      },\n      select (val) {\n        this.$emit('update:mdSelectedValue', val)\n        this.$emit('md-selected', val)\n      },\n      syncSelectedValue () {\n        this.$nextTick().then(() => { // render the table first\n          if (this.MdTable.selectingMode === 'single') {\n            this.MdTable.singleSelection = this.mdSelectedValue\n          } else if (this.MdTable.selectingMode === 'multiple') {\n            this.MdTable.selectedItems = this.mdSelectedValue || []\n          }\n        })\n      },\n      setWidth () {\n        if (this.mdFixedHeader) {\n          this.fixedHeaderTableWidth = this.$refs.contentTable.offsetWidth\n        }\n      }\n    },\n    created () {\n      if (this.mdSort) {\n        this.sortTable()\n      }\n\n      this.syncSelectedValue()\n    },\n    mounted () {\n      this.setContentEl()\n      this.$nextTick().then(this.setWidth)\n\n      if (this.mdFixedHeader) {\n        this.setHeaderPadding()\n        this.windowResizeObserver = new MdResizeObserver(window, this.setWidth)\n      }\n    },\n    beforeDestroy () {\n      if (this.windowResizeObserver) {\n        this.windowResizeObserver.destroy()\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n  @import \"~components/MdAnimation/variables\";\n\n  .md-table {\n    display: flex;\n    flex-flow: column wrap;\n    overflow-x: auto;\n\n    .md-table-fixed-header {\n      position: relative;\n\n      .md-table-fixed-header-container {\n        -webkit-box-flex: 1;\n        flex: 1;\n        overflow-x: auto;\n\n        &::-webkit-scrollbar,\n        &::-webkit-scrollbar-thumb,\n        &::-webkit-scrollbar-button {\n          display: none;\n        }\n      }\n    }\n\n    .md-table-fixed-header-active {\n      border-bottom: 1px solid;\n    }\n\n    .md-table-content {\n      flex: 1;\n      overflow-x: auto;\n      transition: height .3s $md-transition-default-timing;\n    }\n\n    .md-table-empty {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    table {\n      width: 100%;\n      border-spacing: 0;\n      border-collapse: collapse;\n      overflow: hidden;\n    }\n  }\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}