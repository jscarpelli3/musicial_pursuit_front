{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'QuestionCard',\n  props: {\n    artistAlbumInfo: Object,\n    artistStartYr: String,\n    roundNum: Number\n  },\n  data: () => ({\n    checked: [],\n    answers: [],\n    chosen_answer: \"\",\n    pick: [],\n    q_type: 0,\n    round_one: 50,\n    round_two: 100,\n    round_three: 150,\n    question: \"\",\n    cur_answer: \"\",\n    show_question: false,\n    possible_labels: [\"Interscope Records\", \"Capitol Records\", \"Cool Dog Records\", \"4-AD\", \"Hyperbole Records\", \"Flammable Records\", \"Truth & Lies Records\", \"Elektra Records\", \"MetalScope Records\", \"FreeZone Records\"],\n    current_labels: [],\n    years: [],\n    album_titles: [],\n    choices_record_labels: []\n  }),\n  mounted() {\n    this.createQuestion(4);\n  },\n  methods: {\n    onChange(answer) {\n      this.chosen_answer = answer;\n      console.log(this.chosen_answer);\n      console.log(this.checked);\n    },\n    coreectAns(value1, value2) {\n      this.$emit('correct', value1, value2);\n    },\n    incorrectAns() {\n      this.$emit('incorrect');\n    },\n    checkAnswer() {\n      console.log('check answer');\n    },\n    createQuestion(questions) {\n      ///establish data for question\n      ///generate random numbers to choose data\n      ///artist name\n      let artist = this.artistAlbumInfo.album[0].strArtist;\n      ///album at random\n      let albumIdx = Math.floor(Math.random() * this.artistAlbumInfo.album.length);\n      let album = this.artistAlbumInfo.album[albumIdx].strAlbum;\n      ///release year of that album\n      let yearInt = this.artistAlbumInfo.album[albumIdx].intYearReleased;\n      let year = yearInt.toString();\n      ///what type of question? 0,1,2,3\n      let questionType = Math.floor(Math.random() * questions);\n      ///Determin syntax for question\n      if (questionType === 0) {\n        console.log('what year');\n        this.question = `What year was their album \"${album}\" released?`;\n      } else if (questionType === 1) {\n        console.log('what album');\n        this.question = `What album did ${artist} release in the year ${year}?`;\n      } else if (questionType === 2) {\n        this.question = `Was the album \"${album}\"\" released as a full album or as a single?`;\n        console.log('album or single');\n      } else if (questionType === 3) {\n        if (this.artistAlbumInfo.album[albumIdx].strLabel !== null) {\n          console.log('label question');\n          this.question = `What label was their album \"${album}\" released on?`;\n        } else {\n          console.log('no label info');\n          this.createQuestion(3);\n        }\n      }\n      if (this.question !== \"\") {\n        this.show_question = true;\n        this.showQuestion(questionType, albumIdx);\n      }\n    },\n    showQuestion(type, albumIndex) {\n      ///ALBUM YEARS QUESTION\n      if (type === 0) {\n        this.answers = [];\n        console.log('question type 0');\n        let artistStart = parseInt(this.artistStartYr);\n        let releaseYr = parseInt(this.artistAlbumInfo.album[albumIndex].intYearReleased);\n        let years = [releaseYr];\n        this.cur_answer = releaseYr;\n        let yrDiff = 2022 - artistStart;\n        const randYear = () => {\n          let num = Math.floor(Math.random() * yrDiff);\n          if (years.includes(num)) {\n            randYear();\n          } else {\n            years.push(num + artistStart);\n          }\n        };\n        for (let i = 0; i < 3; i++) {\n          randYear();\n        }\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * years.length);\n          this.answers.push(years[num]);\n          years.splice(num, 1);\n        }\n        console.log(this.years);\n        ///ALBUM TITLES QUESTION\n      } else if (type === 1) {\n        this.answers = [];\n        console.log('question type 1');\n        ///transfer album info from data to function-local\n        let albums = this.artistAlbumInfo.album;\n        console.log(albums);\n        ///create temp array for 4 album titles\n        let albumTitles = [];\n        ///include the correct answer\n        albumTitles.push(albums[albumIndex].strAlbum);\n        ///set the answer in data\n        this.cur_answer = albums[albumIndex].strAlbum;\n        ///remove answer from all available artist albums\n        albums.splice(albumIndex, 1);\n        ///do a loop to add a random album to the temp albums array\n        for (let i = 0; i < 3; i++) {\n          let num = Math.floor(Math.random() * albums.length);\n          albumTitles.push(albums[num].strAlbum);\n          albums.splice(num, 1);\n        }\n        console.log(this.artistAlbumInfo.album);\n        ///randomly send one of the 4 album titles to the answer array\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * albumTitles.length);\n          this.answers.push(albumTitles[num]);\n          albumTitles.splice(num, 1);\n        }\n        ///ALBUM SINGLE QUESTION\n      } else if (type === 2) {\n        this.answers = [];\n        console.log('question type 2');\n        ///simply set the current answer to the release format in the chosen album record\n        this.cur_answer = this.artistAlbumInfo.album[albumIndex].strReleaseFormat;\n        this.answers.push(\"single\");\n        this.answers.push(\"album\");\n        this.answers.push(\"neither\");\n        ///ALBUM LABEL QUESTION\n      } else if (type === 3) {\n        this.answers = [];\n        console.log('question type 3');\n        ///set answer\n        this.cur_answer = this.artistAlbumInfo.album[albumIndex].strLabel;\n        ///add answer to answer choices\n        let pre_current_labels = [];\n        pre_current_labels.push(this.artistAlbumInfo.album[albumIndex].strLabel);\n        ///add three wrong answers\n        for (let i = 0; i < 3; i++) {\n          let num = Math.floor(Math.random() * this.possible_labels.length - 1);\n          pre_current_labels.push(this.possible_labels[num]);\n          this.possible_labels.splice(num, 1);\n        }\n        ///randomly choose from the previous array to place in final answers array\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * pre_current_labels.length);\n          this.answers.push(pre_current_labels[num]);\n          pre_current_labels.splice(num, 1);\n        }\n      }\n      this.q_type = type;\n    }\n  }\n};","map":{"version":3,"mappings":";AAgFA,eAAe;EACbA,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE;IACLC,eAAe,EAAEC,MAAM;IACvBC,aAAa,EAAEC,MAAM;IACrBC,QAAQ,EAAEC;EACZ,CAAC;EACDC,IAAI,EAAE,OAAO;IACXC,OAAO,EAAE,EAAE;IACXC,OAAO,EAAE,EAAE;IACXC,aAAa,EAAE,EAAE;IACjBC,IAAI,EAAE,EAAE;IACRC,MAAM,EAAE,CAAC;IACTC,SAAS,EAAE,EAAE;IACbC,SAAS,EAAE,GAAG;IACdC,WAAW,EAAE,GAAG;IAChBC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,EAAE;IACdC,aAAa,EAAE,KAAK;IACpBC,eAAe,EAAE,CAAC,oBAAoB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,MAAM,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,sBAAsB,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,kBAAkB,CAAC;IACrNC,cAAc,EAAE,EAAE;IAClBC,KAAK,EAAE,EAAE;IACTC,YAAY,EAAE,EAAE;IAChBC,qBAAqB,EAAE;EAEzB,CAAC,CAAC;EACFC,OAAO,GAAG;IACR,IAAI,CAACC,cAAc,CAAC,CAAC;EACvB,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQ,CAACC,MAAM,EAAE;MACf,IAAI,CAAClB,aAAY,GAAIkB,MAAK;MAC1BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACpB,aAAa;MAC9BmB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACtB,OAAO;IAC1B,CAAC;IACDuB,UAAU,CAACC,MAAM,EAAEC,MAAM,EAAE;MACzB,IAAI,CAACC,KAAK,CAAC,SAAS,EAAEF,MAAM,EAAEC,MAAM;IACtC,CAAC;IACDE,YAAY,GAAG;MACb,IAAI,CAACD,KAAK,CAAC,WAAW;IACxB,CAAC;IACDE,WAAW,GAAG;MACZP,OAAO,CAACC,GAAG,CAAC,cAAc;IAC5B,CAAC;IACDL,cAAc,CAACY,SAAS,EAAE;MACxB;MACA;MACA;MACA,IAAIC,MAAK,GAAI,IAAI,CAACrC,eAAe,CAACsC,KAAK,CAAC,CAAC,CAAC,CAACC,SAAQ;MACnD;MACA,IAAIC,QAAO,GAAIC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAC,GAAI,IAAI,CAAC3C,eAAe,CAACsC,KAAK,CAACM,MAAM;MAC3E,IAAIN,KAAI,GAAI,IAAI,CAACtC,eAAe,CAACsC,KAAK,CAACE,QAAQ,CAAC,CAACK,QAAO;MACxD;MACA,IAAIC,OAAM,GAAI,IAAI,CAAC9C,eAAe,CAACsC,KAAK,CAACE,QAAQ,CAAC,CAACO,eAAc;MACjE,IAAIC,IAAG,GAAIF,OAAO,CAACG,QAAQ,EAAC;MAC5B;MACA,IAAIC,YAAW,GAAIT,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAC,GAAIP,SAAS;MACvD;MACA,IAAIc,YAAW,KAAM,CAAC,EAAE;QACtBtB,OAAO,CAACC,GAAG,CAAC,WAAW;QACvB,IAAI,CAACd,QAAO,GAAK,8BAA6BuB,KAAM,aAAW;MACjE,OAAO,IAAIY,YAAW,KAAM,CAAC,EAAE;QAC7BtB,OAAO,CAACC,GAAG,CAAC,YAAY;QACxB,IAAI,CAACd,QAAO,GAAK,kBAAiBsB,MAAM,wBAAwBW,IAAK,GAAC;MACxE,OAAO,IAAIE,YAAW,KAAM,CAAC,EAAE;QAC7B,IAAI,CAACnC,QAAO,GAAK,kBAAiBuB,KAAM,6CAA2C;QACnFV,OAAO,CAACC,GAAG,CAAC,iBAAiB;MAC/B,OAAO,IAAIqB,YAAW,KAAM,CAAC,EAAE;QAC7B,IAAI,IAAI,CAAClD,eAAe,CAACsC,KAAK,CAACE,QAAQ,CAAC,CAACW,QAAO,KAAM,IAAI,EAAE;UAC1DvB,OAAO,CAACC,GAAG,CAAC,gBAAgB;UAC5B,IAAI,CAACd,QAAO,GAAK,+BAA8BuB,KAAM,gBAAc;QACrE,OAAO;UACLV,OAAO,CAACC,GAAG,CAAC,eAAe;UAC3B,IAAI,CAACL,cAAc,CAAC,CAAC;QACvB;MACF;MACA,IAAI,IAAI,CAACT,QAAO,KAAM,EAAE,EAAE;QACxB,IAAI,CAACE,aAAY,GAAI,IAAG;QACxB,IAAI,CAACmC,YAAY,CAACF,YAAY,EAAEV,QAAQ;MAC1C;IACF,CAAC;IACDY,YAAY,CAACC,IAAI,EAAEC,UAAU,EAAE;MAC7B;MACA,IAAID,IAAG,KAAM,CAAC,EAAE;QACd,IAAI,CAAC7C,OAAM,GAAI,EAAC;QAChBoB,OAAO,CAACC,GAAG,CAAC,iBAAiB;QAC7B,IAAI0B,WAAU,GAAIC,QAAQ,CAAC,IAAI,CAACtD,aAAa;QAC7C,IAAIuD,SAAQ,GAAID,QAAQ,CAAC,IAAI,CAACxD,eAAe,CAACsC,KAAK,CAACgB,UAAU,CAAC,CAACP,eAAe;QAC/E,IAAI3B,KAAI,GAAI,CAACqC,SAAS;QACtB,IAAI,CAACzC,UAAS,GAAIyC,SAAQ;QAC1B,IAAIC,MAAK,GAAI,IAAG,GAAIH,WAAU;QAC9B,MAAMI,QAAO,GAAI,MAAM;UACrB,IAAIC,GAAE,GAAInB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAC,GAAIe,MAAM;UAC3C,IAAItC,KAAK,CAACyC,QAAQ,CAACD,GAAG,CAAC,EAAE;YACvBD,QAAQ,EAAC;UACX,OAAO;YACLvC,KAAK,CAAC0C,IAAI,CAACF,GAAE,GAAIL,WAAW;UAC9B;QACF;QACA,KAAK,IAAIQ,IAAI,CAAC,EAAEA,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1BJ,QAAQ,EAAC;QACX;QACA,KAAK,IAAII,IAAI,CAAC,EAAEA,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1B,IAAIH,GAAE,GAAInB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAC,GAAIvB,KAAK,CAACwB,MAAM;UACjD,IAAI,CAACpC,OAAO,CAACsD,IAAI,CAAC1C,KAAK,CAACwC,GAAG,CAAC;UAC5BxC,KAAK,CAAC4C,MAAM,CAACJ,GAAG,EAAE,CAAC;QACrB;QACAhC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,KAAK;QACtB;MACF,OAAO,IAAIiC,IAAG,KAAM,CAAC,EAAE;QACrB,IAAI,CAAC7C,OAAM,GAAI,EAAC;QAChBoB,OAAO,CAACC,GAAG,CAAC,iBAAiB;QAC7B;QACA,IAAIoC,MAAK,GAAI,IAAI,CAACjE,eAAe,CAACsC,KAAI;QACtCV,OAAO,CAACC,GAAG,CAACoC,MAAM;QAClB;QACA,IAAIC,WAAU,GAAI,EAAC;QACnB;QACAA,WAAW,CAACJ,IAAI,CAACG,MAAM,CAACX,UAAU,CAAC,CAACT,QAAQ;QAC5C;QACA,IAAI,CAAC7B,UAAS,GAAIiD,MAAM,CAACX,UAAU,CAAC,CAACT,QAAO;QAC5C;QACAoB,MAAM,CAACD,MAAM,CAACV,UAAU,EAAE,CAAC;QAC3B;QACA,KAAK,IAAIS,IAAI,CAAC,EAAEA,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1B,IAAIH,GAAE,GAAInB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAC,GAAIsB,MAAM,CAACrB,MAAM;UAClDsB,WAAW,CAACJ,IAAI,CAACG,MAAM,CAACL,GAAG,CAAC,CAACf,QAAQ;UACrCoB,MAAM,CAACD,MAAM,CAACJ,GAAG,EAAE,CAAC;QACtB;QACAhC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC7B,eAAe,CAACsC,KAAK;QACtC;QACA,KAAK,IAAIyB,IAAI,CAAC,EAAEA,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1B,IAAIH,GAAE,GAAInB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAC,GAAIuB,WAAW,CAACtB,MAAM;UACvD,IAAI,CAACpC,OAAO,CAACsD,IAAI,CAACI,WAAW,CAACN,GAAG,CAAC;UAClCM,WAAW,CAACF,MAAM,CAACJ,GAAG,EAAE,CAAC;QAC3B;QACA;MACF,OAAO,IAAIP,IAAG,KAAM,CAAC,EAAE;QACrB,IAAI,CAAC7C,OAAM,GAAI,EAAC;QAChBoB,OAAO,CAACC,GAAG,CAAC,iBAAiB;QAC7B;QACA,IAAI,CAACb,UAAS,GAAI,IAAI,CAAChB,eAAe,CAACsC,KAAK,CAACgB,UAAU,CAAC,CAACa,gBAAe;QACxE,IAAI,CAAC3D,OAAO,CAACsD,IAAI,CAAC,QAAQ;QAC1B,IAAI,CAACtD,OAAO,CAACsD,IAAI,CAAC,OAAO;QACzB,IAAI,CAACtD,OAAO,CAACsD,IAAI,CAAC,SAAS;QAC3B;MACF,OAAO,IAAIT,IAAG,KAAM,CAAC,EAAE;QACrB,IAAI,CAAC7C,OAAM,GAAI,EAAC;QAChBoB,OAAO,CAACC,GAAG,CAAC,iBAAiB;QAC7B;QACA,IAAI,CAACb,UAAS,GAAI,IAAI,CAAChB,eAAe,CAACsC,KAAK,CAACgB,UAAU,CAAC,CAACH,QAAO;QAChE;QACA,IAAIiB,kBAAiB,GAAI,EAAC;QAC1BA,kBAAkB,CAACN,IAAI,CAAC,IAAI,CAAC9D,eAAe,CAACsC,KAAK,CAACgB,UAAU,CAAC,CAACH,QAAQ;QACvE;QACA,KAAK,IAAIY,IAAI,CAAC,EAAEA,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1B,IAAIH,GAAE,GAAInB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAC,GAAI,IAAI,CAACzB,eAAe,CAAC0B,MAAK,GAAI,CAAC;UACpEwB,kBAAkB,CAACN,IAAI,CAAC,IAAI,CAAC5C,eAAe,CAAC0C,GAAG,CAAC;UACjD,IAAI,CAAC1C,eAAe,CAAC8C,MAAM,CAACJ,GAAG,EAAE,CAAC;QACpC;QACA;QACA,KAAK,IAAIG,IAAI,CAAC,EAAEA,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1B,IAAIH,GAAE,GAAInB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAC,GAAIyB,kBAAkB,CAACxB,MAAM;UAC9D,IAAI,CAACpC,OAAO,CAACsD,IAAI,CAACM,kBAAkB,CAACR,GAAG,CAAC;UACzCQ,kBAAkB,CAACJ,MAAM,CAACJ,GAAG,EAAE,CAAC;QAClC;MACF;MACA,IAAI,CAACjD,MAAK,GAAI0C,IAAG;IACnB;EACF;AACF","names":["name","props","artistAlbumInfo","Object","artistStartYr","String","roundNum","Number","data","checked","answers","chosen_answer","pick","q_type","round_one","round_two","round_three","question","cur_answer","show_question","possible_labels","current_labels","years","album_titles","choices_record_labels","mounted","createQuestion","methods","onChange","answer","console","log","coreectAns","value1","value2","$emit","incorrectAns","checkAnswer","questions","artist","album","strArtist","albumIdx","Math","floor","random","length","strAlbum","yearInt","intYearReleased","year","toString","questionType","strLabel","showQuestion","type","albumIndex","artistStart","parseInt","releaseYr","yrDiff","randYear","num","includes","push","i","splice","albums","albumTitles","strReleaseFormat","pre_current_labels"],"sourceRoot":"","sources":["/Users/jscarpelli/ga_seir919/projects/musical_pursuit/musicial_pursuit_front/musical_pursuit/src/components/GameComponents/Question.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Round {{ roundNum }} </h2>\n    <div class=\"game-space\">\n      <div v-if=\"show_question\" class=\"printed-question-div\">\n        <!-- <div v-if=\"show_question\" class=\"printed-question-div\">\n        <p class=\"printed-question\">{{ question }}</p>\n        <div class=\"question\" v-if=\"q_type === 0\">\n          <h3 class=\"choice\">you chose:{{ pick[0] }}</h3>\n          <form>\n            <label>{{ years[0] }}</label>\n            <input type=\"checkbox\" v-model=\"pick1\" id=\"years1\" :value=\"years[0]\" :disabled=\"pick.length > 0\" /><br />\n            <label>{{ years[1] }}</label>\n            <input type=\"checkbox\" v-model=\"pick2\" id=\"years1\" :value=\"years[1]\" :disabled=\"pick.length > 0\" /><br />\n            <label>{{ years[2] }}</label>\n            <input type=\"checkbox\" v-model=\"pick3\" id=\"years2\" :value=\"years[2]\" :disabled=\"pick.length > 0\" /><br />\n            <label>{{ years[3] }}</label>\n            <input type=\"checkbox\" v-model=\"pick4\" id=\"years3\" :value=\"years[3]\" :disabled=\"pick.length > 0\" /><br />\n          </form>\n        </div>\n        <div class=\"question\" v-if=\"q_type === 1\">\n          <h3 class=\"choice\">you chose:{{ pick[0] }}</h3>\n          <form>\n            <label>Choose</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"0\" value=\"{{album_titles[0]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n            <label>Choose</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"3\" value=\"{{album_titles[1]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n            <label>Choose</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"2\" value=\"{{album_titles[2]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n            <label>Choose</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"t\" value=\"{{album_titles[3]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n          </form>\n        </div>\n        <div class=\"question\" v-if=\"q_type === 2\">\n          <h3 class=\"choice\">you chose:{{ pick[0] }}</h3>\n          <form>\n            <label>Single</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"Single\" value=\"Single\" :disabled=\"pick.length > 0\" /><br />\n            <label>Album</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"Album\" value=\"Album\" :disabled=\"pick.length > 0\" /><br />\n            <label>Neither</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"Neither\" value=\"Neither\" :disabled=\"pick.length > 0\" /><br />\n          </form>\n        </div>\n        <div class=\"question\" v-if=\"q_type === 3\">\n          <h3 class=\"choice\">you chose:{{ pick[0] }}</h3>\n          <form>\n            <label>{{ current_labels[0] }}</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"current_labels[0]\" value=\"{{current_labels[0]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n            <label>{{ current_labels[1] }}</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"current_labels[1]\" value=\"{{current_labels[1]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n            <label>{{ current_labels[2] }}</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"current_labels[2]\" value=\"{{current_labels[2]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n            <label>{{ current_labels[3] }}</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\" current_labels[3]\" value=\"{{current_labels[3]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n          </form> -->\n        <!-- </div> -->\n        <div class=\"answer-options\">\n          <p class=\"printed-question\">{{ question }}</p>\n          <label v-for=\"(answer, i) in answers\" :key=\"i\" class=\"ans-choice\">\n            {{ answer }}<br />\n            <input :id=\"answer\" v-model=\"checked\" type=\"checkbox\" @change=\"onChange(answer)\"\n              :disabled=\"{{ pick.length > 0 }}\" />\n          </label>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: 'QuestionCard',\n  props: {\n    artistAlbumInfo: Object,\n    artistStartYr: String,\n    roundNum: Number\n  },\n  data: () => ({\n    checked: [],\n    answers: [],\n    chosen_answer: \"\",\n    pick: [],\n    q_type: 0,\n    round_one: 50,\n    round_two: 100,\n    round_three: 150,\n    question: \"\",\n    cur_answer: \"\",\n    show_question: false,\n    possible_labels: [\"Interscope Records\", \"Capitol Records\", \"Cool Dog Records\", \"4-AD\", \"Hyperbole Records\", \"Flammable Records\", \"Truth & Lies Records\", \"Elektra Records\", \"MetalScope Records\", \"FreeZone Records\"],\n    current_labels: [],\n    years: [],\n    album_titles: [],\n    choices_record_labels: [],\n\n  }),\n  mounted() {\n    this.createQuestion(4)\n  },\n  methods: {\n    onChange(answer) {\n      this.chosen_answer = answer\n      console.log(this.chosen_answer)\n      console.log(this.checked)\n    },\n    coreectAns(value1, value2) {\n      this.$emit('correct', value1, value2)\n    },\n    incorrectAns() {\n      this.$emit('incorrect')\n    },\n    checkAnswer() {\n      console.log('check answer')\n    },\n    createQuestion(questions) {\n      ///establish data for question\n      ///generate random numbers to choose data\n      ///artist name\n      let artist = this.artistAlbumInfo.album[0].strArtist\n      ///album at random\n      let albumIdx = Math.floor(Math.random() * this.artistAlbumInfo.album.length)\n      let album = this.artistAlbumInfo.album[albumIdx].strAlbum\n      ///release year of that album\n      let yearInt = this.artistAlbumInfo.album[albumIdx].intYearReleased\n      let year = yearInt.toString()\n      ///what type of question? 0,1,2,3\n      let questionType = Math.floor(Math.random() * questions)\n      ///Determin syntax for question\n      if (questionType === 0) {\n        console.log('what year')\n        this.question = `What year was their album \"${album}\" released?`\n      } else if (questionType === 1) {\n        console.log('what album')\n        this.question = `What album did ${artist} release in the year ${year}?`\n      } else if (questionType === 2) {\n        this.question = `Was the album \"${album}\"\" released as a full album or as a single?`\n        console.log('album or single')\n      } else if (questionType === 3) {\n        if (this.artistAlbumInfo.album[albumIdx].strLabel !== null) {\n          console.log('label question')\n          this.question = `What label was their album \"${album}\" released on?`\n        } else {\n          console.log('no label info')\n          this.createQuestion(3)\n        }\n      }\n      if (this.question !== \"\") {\n        this.show_question = true\n        this.showQuestion(questionType, albumIdx)\n      }\n    },\n    showQuestion(type, albumIndex) {\n      ///ALBUM YEARS QUESTION\n      if (type === 0) {\n        this.answers = []\n        console.log('question type 0')\n        let artistStart = parseInt(this.artistStartYr)\n        let releaseYr = parseInt(this.artistAlbumInfo.album[albumIndex].intYearReleased)\n        let years = [releaseYr]\n        this.cur_answer = releaseYr\n        let yrDiff = 2022 - artistStart\n        const randYear = () => {\n          let num = Math.floor(Math.random() * yrDiff)\n          if (years.includes(num)) {\n            randYear()\n          } else {\n            years.push(num + artistStart)\n          }\n        }\n        for (let i = 0; i < 3; i++) {\n          randYear()\n        }\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * years.length)\n          this.answers.push(years[num])\n          years.splice(num, 1)\n        }\n        console.log(this.years)\n        ///ALBUM TITLES QUESTION\n      } else if (type === 1) {\n        this.answers = []\n        console.log('question type 1')\n        ///transfer album info from data to function-local\n        let albums = this.artistAlbumInfo.album\n        console.log(albums)\n        ///create temp array for 4 album titles\n        let albumTitles = []\n        ///include the correct answer\n        albumTitles.push(albums[albumIndex].strAlbum)\n        ///set the answer in data\n        this.cur_answer = albums[albumIndex].strAlbum\n        ///remove answer from all available artist albums\n        albums.splice(albumIndex, 1)\n        ///do a loop to add a random album to the temp albums array\n        for (let i = 0; i < 3; i++) {\n          let num = Math.floor(Math.random() * albums.length)\n          albumTitles.push(albums[num].strAlbum)\n          albums.splice(num, 1)\n        }\n        console.log(this.artistAlbumInfo.album)\n        ///randomly send one of the 4 album titles to the answer array\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * albumTitles.length)\n          this.answers.push(albumTitles[num])\n          albumTitles.splice(num, 1)\n        }\n        ///ALBUM SINGLE QUESTION\n      } else if (type === 2) {\n        this.answers = []\n        console.log('question type 2')\n        ///simply set the current answer to the release format in the chosen album record\n        this.cur_answer = this.artistAlbumInfo.album[albumIndex].strReleaseFormat\n        this.answers.push(\"single\")\n        this.answers.push(\"album\")\n        this.answers.push(\"neither\")\n        ///ALBUM LABEL QUESTION\n      } else if (type === 3) {\n        this.answers = []\n        console.log('question type 3')\n        ///set answer\n        this.cur_answer = this.artistAlbumInfo.album[albumIndex].strLabel\n        ///add answer to answer choices\n        let pre_current_labels = []\n        pre_current_labels.push(this.artistAlbumInfo.album[albumIndex].strLabel)\n        ///add three wrong answers\n        for (let i = 0; i < 3; i++) {\n          let num = Math.floor(Math.random() * this.possible_labels.length - 1)\n          pre_current_labels.push(this.possible_labels[num])\n          this.possible_labels.splice(num, 1)\n        }\n        ///randomly choose from the previous array to place in final answers array\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * pre_current_labels.length)\n          this.answers.push(pre_current_labels[num])\n          pre_current_labels.splice(num, 1)\n        }\n      }\n      this.q_type = type\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.game-space {\n  display: flex;\n  justify-content: center;\n  margin: 2vw;\n}\n\n.answer-options>input:checked {\n\n  background-color: rgb(146, 146, 146);\n}\n\n/* checkbox>input:checked {\n} */\n\n.question,\n.answer-options {\n  display: grid;\n  grid-template-columns: 1fr;\n  /* grid-template-rows: 1fr 1fr 1fr 1fr; */\n  background-color: rgba(105, 105, 105, 0.247);\n  padding: 1vh 2vw 1vh 2vw;\n  border-radius: 8px;\n  box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.347);\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}