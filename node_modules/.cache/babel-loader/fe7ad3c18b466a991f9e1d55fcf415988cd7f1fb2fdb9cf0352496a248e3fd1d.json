{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-49f1ad0d\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"game-space\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"printed-question-div\"\n};\nconst _hoisted_3 = {\n  class: \"answer-options\"\n};\nconst _hoisted_4 = {\n  class: \"printed-question\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_6 = [\"id\", \"onChange\", \"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h2\", null, \"Round \" + _toDisplayString($props.roundNum), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_1, [_ctx.show_question ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createCommentVNode(\" <div v-if=\\\"show_question\\\" class=\\\"printed-question-div\\\">\\n        <p class=\\\"printed-question\\\">{{ question }}</p>\\n        <div class=\\\"question\\\" v-if=\\\"q_type === 0\\\">\\n          <h3 class=\\\"choice\\\">you chose:{{ pick[0] }}</h3>\\n          <form>\\n            <label>{{ years[0] }}</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick1\\\" id=\\\"years1\\\" :value=\\\"years[0]\\\" :disabled=\\\"pick.length > 0\\\" /><br />\\n            <label>{{ years[1] }}</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick2\\\" id=\\\"years1\\\" :value=\\\"years[1]\\\" :disabled=\\\"pick.length > 0\\\" /><br />\\n            <label>{{ years[2] }}</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick3\\\" id=\\\"years2\\\" :value=\\\"years[2]\\\" :disabled=\\\"pick.length > 0\\\" /><br />\\n            <label>{{ years[3] }}</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick4\\\" id=\\\"years3\\\" :value=\\\"years[3]\\\" :disabled=\\\"pick.length > 0\\\" /><br />\\n          </form>\\n        </div>\\n        <div class=\\\"question\\\" v-if=\\\"q_type === 1\\\">\\n          <h3 class=\\\"choice\\\">you chose:{{ pick[0] }}</h3>\\n          <form>\\n            <label>Choose</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick\\\" id=\\\"0\\\" value=\\\"{{album_titles[0]}}\\\"\\n              :disabled=\\\"pick.length > 0\\\" /><br />\\n            <label>Choose</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick\\\" id=\\\"3\\\" value=\\\"{{album_titles[1]}}\\\"\\n              :disabled=\\\"pick.length > 0\\\" /><br />\\n            <label>Choose</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick\\\" id=\\\"2\\\" value=\\\"{{album_titles[2]}}\\\"\\n              :disabled=\\\"pick.length > 0\\\" /><br />\\n            <label>Choose</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick\\\" id=\\\"t\\\" value=\\\"{{album_titles[3]}}\\\"\\n              :disabled=\\\"pick.length > 0\\\" /><br />\\n          </form>\\n        </div>\\n        <div class=\\\"question\\\" v-if=\\\"q_type === 2\\\">\\n          <h3 class=\\\"choice\\\">you chose:{{ pick[0] }}</h3>\\n          <form>\\n            <label>Single</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick\\\" id=\\\"Single\\\" value=\\\"Single\\\" :disabled=\\\"pick.length > 0\\\" /><br />\\n            <label>Album</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick\\\" id=\\\"Album\\\" value=\\\"Album\\\" :disabled=\\\"pick.length > 0\\\" /><br />\\n            <label>Neither</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick\\\" id=\\\"Neither\\\" value=\\\"Neither\\\" :disabled=\\\"pick.length > 0\\\" /><br />\\n          </form>\\n        </div>\\n        <div class=\\\"question\\\" v-if=\\\"q_type === 3\\\">\\n          <h3 class=\\\"choice\\\">you chose:{{ pick[0] }}</h3>\\n          <form>\\n            <label>{{ current_labels[0] }}</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick\\\" id=\\\"current_labels[0]\\\" value=\\\"{{current_labels[0]}}\\\"\\n              :disabled=\\\"pick.length > 0\\\" /><br />\\n            <label>{{ current_labels[1] }}</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick\\\" id=\\\"current_labels[1]\\\" value=\\\"{{current_labels[1]}}\\\"\\n              :disabled=\\\"pick.length > 0\\\" /><br />\\n            <label>{{ current_labels[2] }}</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick\\\" id=\\\"current_labels[2]\\\" value=\\\"{{current_labels[2]}}\\\"\\n              :disabled=\\\"pick.length > 0\\\" /><br />\\n            <label>{{ current_labels[3] }}</label>\\n            <input type=\\\"checkbox\\\" v-model=\\\"pick\\\" id=\\\" current_labels[3]\\\" value=\\\"{{current_labels[3]}}\\\"\\n              :disabled=\\\"pick.length > 0\\\" /><br />\\n          </form> \"), _createCommentVNode(\" </div> \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"p\", _hoisted_4, _toDisplayString(_ctx.question), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.answers, (answer, i) => {\n    return _openBlock(), _createElementBlock(\"label\", {\n      key: i,\n      class: \"ans-choice\"\n    }, [_createTextVNode(_toDisplayString(answer), 1 /* TEXT */), _hoisted_5, _withDirectives(_createElementVNode(\"input\", {\n      id: answer,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.checked = $event),\n      type: \"checkbox\",\n      onChange: $event => $options.onChange(answer),\n      disabled: _ctx.pick.length !== 0\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_6), [[_vModelCheckbox, _ctx.checked]])]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"mappings":";;;EAGSA,KAAK,EAAC;AAAY;;;EACKA,KAAK,EAAC;;;EA6DzBA,KAAK,EAAC;AAAgB;;EACtBA,KAAK,EAAC;AAAkB;gEAEbC,oBAAM;;;uBAnE5BC,oBA0EM,cAzEJD,oBAA8B,YAA1B,QAAM,oBAAGE,eAAQ,kBACrBF,oBAuEM,OAvENG,UAuEM,GAtEOC,kBAAa,kBAAxBH,oBAqEM,OArENI,UAqEM,GApEJC,2/GA0Da,EACbA,+BAAe,EACfN,oBAOM,OAPNO,UAOM,GANJP,oBAA8C,KAA9CQ,UAA8C,mBAAfJ,aAAQ,qCACvCH,oBAIQQ,6BAJqBL,YAAO,GAArBM,MAAM,EAAEC,CAAC;yBAAxBV,oBAIQ;MAJ+BW,GAAG,EAAED,CAAC;MAAEZ,KAAK,EAAC;0CAChDW,MAAM,kBAAGG,UAAM,kBAClBb,oBACkC;MAD1Bc,EAAE,EAAEJ,MAAM;iEAAWN,YAAO;MAAEW,IAAI,EAAC,UAAU;MAAEC,QAAM,YAAEC,iBAAQ,CAACP,MAAM;MAC3EQ,QAAQ,EAAEd,SAAI,CAACe,MAAM;6EADKf,YAAO","names":["class","_createElementVNode","_createElementBlock","$props","_hoisted_1","_ctx","_hoisted_2","_createCommentVNode","_hoisted_3","_hoisted_4","_Fragment","answer","i","key","_hoisted_5","id","type","onChange","$options","disabled","length"],"sourceRoot":"","sources":["/Users/jscarpelli/ga_seir919/projects/musical_pursuit/musicial_pursuit_front/musical_pursuit/src/components/GameComponents/Question.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Round {{ roundNum }} </h2>\n    <div class=\"game-space\">\n      <div v-if=\"show_question\" class=\"printed-question-div\">\n        <!-- <div v-if=\"show_question\" class=\"printed-question-div\">\n        <p class=\"printed-question\">{{ question }}</p>\n        <div class=\"question\" v-if=\"q_type === 0\">\n          <h3 class=\"choice\">you chose:{{ pick[0] }}</h3>\n          <form>\n            <label>{{ years[0] }}</label>\n            <input type=\"checkbox\" v-model=\"pick1\" id=\"years1\" :value=\"years[0]\" :disabled=\"pick.length > 0\" /><br />\n            <label>{{ years[1] }}</label>\n            <input type=\"checkbox\" v-model=\"pick2\" id=\"years1\" :value=\"years[1]\" :disabled=\"pick.length > 0\" /><br />\n            <label>{{ years[2] }}</label>\n            <input type=\"checkbox\" v-model=\"pick3\" id=\"years2\" :value=\"years[2]\" :disabled=\"pick.length > 0\" /><br />\n            <label>{{ years[3] }}</label>\n            <input type=\"checkbox\" v-model=\"pick4\" id=\"years3\" :value=\"years[3]\" :disabled=\"pick.length > 0\" /><br />\n          </form>\n        </div>\n        <div class=\"question\" v-if=\"q_type === 1\">\n          <h3 class=\"choice\">you chose:{{ pick[0] }}</h3>\n          <form>\n            <label>Choose</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"0\" value=\"{{album_titles[0]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n            <label>Choose</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"3\" value=\"{{album_titles[1]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n            <label>Choose</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"2\" value=\"{{album_titles[2]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n            <label>Choose</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"t\" value=\"{{album_titles[3]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n          </form>\n        </div>\n        <div class=\"question\" v-if=\"q_type === 2\">\n          <h3 class=\"choice\">you chose:{{ pick[0] }}</h3>\n          <form>\n            <label>Single</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"Single\" value=\"Single\" :disabled=\"pick.length > 0\" /><br />\n            <label>Album</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"Album\" value=\"Album\" :disabled=\"pick.length > 0\" /><br />\n            <label>Neither</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"Neither\" value=\"Neither\" :disabled=\"pick.length > 0\" /><br />\n          </form>\n        </div>\n        <div class=\"question\" v-if=\"q_type === 3\">\n          <h3 class=\"choice\">you chose:{{ pick[0] }}</h3>\n          <form>\n            <label>{{ current_labels[0] }}</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"current_labels[0]\" value=\"{{current_labels[0]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n            <label>{{ current_labels[1] }}</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"current_labels[1]\" value=\"{{current_labels[1]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n            <label>{{ current_labels[2] }}</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\"current_labels[2]\" value=\"{{current_labels[2]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n            <label>{{ current_labels[3] }}</label>\n            <input type=\"checkbox\" v-model=\"pick\" id=\" current_labels[3]\" value=\"{{current_labels[3]}}\"\n              :disabled=\"pick.length > 0\" /><br />\n          </form> -->\n        <!-- </div> -->\n        <div class=\"answer-options\">\n          <p class=\"printed-question\">{{ question }}</p>\n          <label v-for=\"(answer, i) in answers\" :key=\"i\" class=\"ans-choice\">\n            {{ answer }}<br />\n            <input :id=\"answer\" v-model=\"checked\" type=\"checkbox\" @change=\"onChange(answer)\"\n              :disabled=\"pick.length !== 0\" />\n          </label>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: 'QuestionCard',\n  props: {\n    artistAlbumInfo: Object,\n    artistStartYr: String,\n    roundNum: Number\n  },\n  data: () => ({\n    checked: [],\n    answers: [],\n    chosen_answer: \"\",\n    pick: [],\n    q_type: 0,\n    round_one: 50,\n    round_two: 100,\n    round_three: 150,\n    question: \"\",\n    cur_answer: \"\",\n    show_question: false,\n    possible_labels: [\"Interscope Records\", \"Capitol Records\", \"Cool Dog Records\", \"4-AD\", \"Hyperbole Records\", \"Flammable Records\", \"Truth & Lies Records\", \"Elektra Records\", \"MetalScope Records\", \"FreeZone Records\"],\n    current_labels: [],\n    years: [],\n    album_titles: [],\n    choices_record_labels: [],\n\n  }),\n  mounted() {\n    this.createQuestion(4)\n  },\n  methods: {\n    onChange(answer) {\n      this.chosen_answer = answer\n      console.log(this.chosen_answer)\n      console.log(this.checked)\n    },\n    coreectAns(value1, value2) {\n      this.$emit('correct', value1, value2)\n    },\n    incorrectAns() {\n      this.$emit('incorrect')\n    },\n    checkAnswer() {\n      console.log('check answer')\n    },\n    createQuestion(questions) {\n      ///establish data for question\n      ///generate random numbers to choose data\n      ///artist name\n      let artist = this.artistAlbumInfo.album[0].strArtist\n      ///album at random\n      let albumIdx = Math.floor(Math.random() * this.artistAlbumInfo.album.length)\n      let album = this.artistAlbumInfo.album[albumIdx].strAlbum\n      ///release year of that album\n      let yearInt = this.artistAlbumInfo.album[albumIdx].intYearReleased\n      let year = yearInt.toString()\n      ///what type of question? 0,1,2,3\n      let questionType = Math.floor(Math.random() * questions)\n      ///Determin syntax for question\n      if (questionType === 0) {\n        console.log('what year')\n        this.question = `What year was their album \"${album}\" released?`\n      } else if (questionType === 1) {\n        console.log('what album')\n        this.question = `What album did ${artist} release in the year ${year}?`\n      } else if (questionType === 2) {\n        this.question = `Was the album \"${album}\"\" released as a full album or as a single?`\n        console.log('album or single')\n      } else if (questionType === 3) {\n        if (this.artistAlbumInfo.album[albumIdx].strLabel !== null) {\n          console.log('label question')\n          this.question = `What label was their album \"${album}\" released on?`\n        } else {\n          console.log('no label info')\n          this.createQuestion(3)\n        }\n      }\n      if (this.question !== \"\") {\n        this.show_question = true\n        this.showQuestion(questionType, albumIdx)\n      }\n    },\n    showQuestion(type, albumIndex) {\n      ///ALBUM YEARS QUESTION\n      if (type === 0) {\n        this.answers = []\n        console.log('question type 0')\n        let artistStart = parseInt(this.artistStartYr)\n        let releaseYr = parseInt(this.artistAlbumInfo.album[albumIndex].intYearReleased)\n        let years = [releaseYr]\n        this.cur_answer = releaseYr\n        let yrDiff = 2022 - artistStart\n        const randYear = () => {\n          let num = Math.floor(Math.random() * yrDiff)\n          if (years.includes(num)) {\n            randYear()\n          } else {\n            years.push(num + artistStart)\n          }\n        }\n        for (let i = 0; i < 3; i++) {\n          randYear()\n        }\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * years.length)\n          this.answers.push(years[num])\n          years.splice(num, 1)\n        }\n        console.log(this.years)\n        ///ALBUM TITLES QUESTION\n      } else if (type === 1) {\n        this.answers = []\n        console.log('question type 1')\n        ///transfer album info from data to function-local\n        let albums = this.artistAlbumInfo.album\n        console.log(albums)\n        ///create temp array for 4 album titles\n        let albumTitles = []\n        ///include the correct answer\n        albumTitles.push(albums[albumIndex].strAlbum)\n        ///set the answer in data\n        this.cur_answer = albums[albumIndex].strAlbum\n        ///remove answer from all available artist albums\n        albums.splice(albumIndex, 1)\n        ///do a loop to add a random album to the temp albums array\n        for (let i = 0; i < 3; i++) {\n          let num = Math.floor(Math.random() * albums.length)\n          albumTitles.push(albums[num].strAlbum)\n          albums.splice(num, 1)\n        }\n        console.log(this.artistAlbumInfo.album)\n        ///randomly send one of the 4 album titles to the answer array\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * albumTitles.length)\n          this.answers.push(albumTitles[num])\n          albumTitles.splice(num, 1)\n        }\n        ///ALBUM SINGLE QUESTION\n      } else if (type === 2) {\n        this.answers = []\n        console.log('question type 2')\n        ///simply set the current answer to the release format in the chosen album record\n        this.cur_answer = this.artistAlbumInfo.album[albumIndex].strReleaseFormat\n        this.answers.push(\"single\")\n        this.answers.push(\"album\")\n        this.answers.push(\"neither\")\n        ///ALBUM LABEL QUESTION\n      } else if (type === 3) {\n        this.answers = []\n        console.log('question type 3')\n        ///set answer\n        this.cur_answer = this.artistAlbumInfo.album[albumIndex].strLabel\n        ///add answer to answer choices\n        let pre_current_labels = []\n        pre_current_labels.push(this.artistAlbumInfo.album[albumIndex].strLabel)\n        ///add three wrong answers\n        for (let i = 0; i < 3; i++) {\n          let num = Math.floor(Math.random() * this.possible_labels.length - 1)\n          pre_current_labels.push(this.possible_labels[num])\n          this.possible_labels.splice(num, 1)\n        }\n        ///randomly choose from the previous array to place in final answers array\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * pre_current_labels.length)\n          this.answers.push(pre_current_labels[num])\n          pre_current_labels.splice(num, 1)\n        }\n      }\n      this.q_type = type\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.game-space {\n  display: flex;\n  justify-content: center;\n  margin: 2vw;\n}\n\n.answer-options>input:checked {\n\n  background-color: rgb(146, 146, 146);\n}\n\n/* checkbox>input:checked {\n} */\n\n.question,\n.answer-options {\n  display: grid;\n  grid-template-columns: 1fr;\n  /* grid-template-rows: 1fr 1fr 1fr 1fr; */\n  background-color: rgba(105, 105, 105, 0.247);\n  padding: 1vh 2vw 1vh 2vw;\n  border-radius: 8px;\n  box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.347);\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}