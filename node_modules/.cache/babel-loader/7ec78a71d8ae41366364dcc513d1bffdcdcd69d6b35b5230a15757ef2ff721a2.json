{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import { number } from 'prop-types'\n\nexport default {\n  name: 'QuestionCard',\n  props: {\n    artistAlbumInfo: Object,\n    artistStartYr: String,\n    roundNum: Number\n  },\n  data: () => ({\n    pick1: \"\",\n    pick2: \"\",\n    pick3: \"\",\n    pick4: \"\",\n    // pick: \"\",\n    q_type: 9,\n    round_one: 50,\n    round_two: 100,\n    round_three: 150,\n    question: \"\",\n    cur_answer: \"\",\n    show_question: false,\n    possible_labels: [\"Interscope Records\", \"Capitol Records\", \"Cool Dog Records\", \"4-AD\", \"Hyperbole Records\", \"Flammable Records\", \"Truth & Lies Records\", \"Elektra Records\", \"MetalScope Records\", \"FreeZone Records\"],\n    current_labels: [],\n    years: [],\n    album_titles: [],\n    choices_record_labels: []\n  }),\n  mounted() {\n    this.createQuestion(4);\n  },\n  methods: {\n    coreectAns(value1, value2) {\n      this.$emit('correct', value1, value2);\n    },\n    incorrectAns() {\n      this.$emit('incorrect');\n    },\n    checkAnswer() {\n      console.log('check answer');\n    },\n    createQuestion(questions) {\n      ///establish data for question\n      ///generate random numbers to choose data\n      ///artist name\n      let artist = this.artistAlbumInfo.album[0].strArtist;\n      ///album at random\n      let albumIdx = Math.floor(Math.random() * this.artistAlbumInfo.album.length);\n      let album = this.artistAlbumInfo.album[albumIdx].strAlbum;\n      ///release year of that album\n      let yearInt = this.artistAlbumInfo.album[albumIdx].intYearReleased;\n      let year = yearInt.toString();\n      ///what type of question? 0,1,2,3\n      let questionType = Math.floor(Math.random() * questions);\n      ///Determin syntax for question\n      if (questionType === 0) {\n        this.questions = `What year was their album \"${album}\" released?`;\n      } else if (questionType === 1) {\n        this.question = `What album did ${artist} release in the year ${year}?`;\n      } else if (questionType === 2) {\n        this.question = `Was the album \"${album}\"\" released as a full album or as a single?`;\n      } else if (questionType === 3) {\n        if (this.artistAlbumInfo.album[albumIdx].strLabel !== null) {\n          this.question = `What label was their album \"${album}\" released on?`;\n        } else {\n          this.createQuestion(3);\n        }\n      }\n      if (this.question !== \"\") {\n        this.show_question = true;\n        this.showQuestion(questionType, albumIdx);\n      }\n    },\n    showQuestion(type, albumIndex) {\n      console.log(albumIndex);\n      console.log(type);\n      if (type === 0) {\n        let artistStart = parseInt(this.artistStartYr);\n        let releaseYr = parseInt(this.artistAlbumInfo.album[albumIndex].intYearReleased);\n        let years = [releaseYr];\n        this.cur_answer = releaseYr;\n        let yrDiff = 2022 - artistStart;\n        const randYear = () => {\n          let num = Math.floor(Math.random() * yrDiff);\n          if (years.includes(num)) {\n            randYear();\n          } else {\n            years.push(num);\n          }\n        };\n        for (let i = 0; i < 3; i++) {\n          randYear();\n        }\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * years.length);\n          this.years.push(years[num]);\n          years.splice(num, 1);\n        }\n        console.log(years);\n      } else if (type === 1) {\n        console.log('question type 1');\n      } else if (type === 2) {\n        console.log('question type 2');\n      } else if (type === 3) {\n        console.log('question type 3');\n        ///set answer\n        this.cur_answer = this.artistAlbumInfo.album[albumIndex].strLabel;\n        ///add answer to answer choices\n        let pre_current_labels = [];\n        pre_current_labels.push(this.artistAlbumInfo.album[albumIndex].strLabel);\n        ///add three wrong answers\n        for (let i = 0; i < 3; i++) {\n          let num = Math.floor(Math.random() * this.possible_labels.length - 1);\n          pre_current_labels.push(this.possible_labels[num]);\n          this.possible_labels.splice(num, 1);\n        }\n        ///randomly choose from the previous array to place in final answers array\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * pre_current_labels.length);\n          this.current_labels.push(pre_current_labels[num]);\n          pre_current_labels.splice(num, 1);\n        }\n      }\n      this.q_type = type;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["name","props","artistAlbumInfo","Object","artistStartYr","String","roundNum","Number","data","pick1","pick2","pick3","pick4","q_type","round_one","round_two","round_three","question","cur_answer","show_question","possible_labels","current_labels","years","album_titles","choices_record_labels","mounted","createQuestion","methods","coreectAns","value1","value2","$emit","incorrectAns","checkAnswer","console","log","questions","artist","album","strArtist","albumIdx","Math","floor","random","length","strAlbum","yearInt","intYearReleased","year","toString","questionType","strLabel","showQuestion","type","albumIndex","artistStart","parseInt","releaseYr","yrDiff","randYear","num","includes","push","i","splice","pre_current_labels"],"sourceRoot":"","sources":["/Users/jscarpelli/ga_seir919/projects/musical_pursuit/musicial_pursuit_front/musical_pursuit/src/components/GameComponents/Question.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Round {{ roundNum }} </h2>\n    <div v-if=\"show_question\" class=\"printed-question-div\">\n      <p class=\"printed-question\">{{ question }}</p>\n      <div v-if=\"q_type === 0\">\n        <form>\n          <label>{{ years[0] }}</label>\n          <input type=\"checkbox\" v-model=\"pick1\" id=\"years1\" :value=\"years[0]\" />\n          <label>{{ years[1] }}</label>\n          <input type=\"checkbox\" v-model=\"pick2\" id=\"years1\" :value=\"years[1]\" />\n          <label>{{ years[2] }}</label>\n          <input type=\"checkbox\" v-model=\"pick3\" id=\"years2\" :value=\"years[2]\" />\n          <label>{{ years[3] }}</label>\n          <input type=\"checkbox\" v-model=\"pick4\" id=\"years3\" :value=\"years[3]\" />\n        </form>\n      </div>\n      <div v-if=\"q_type === 1\">\n        <form>\n          <input type=\"checkbox\" v-model=\"pick1\" :value=\"years[0]\" />\n          <label>{{ years[0] }}</label>\n          <input type=\"checkbox\" v-model=\"pick2\" :value=\"first\" />\n          <input type=\"checkbox\" v-model=\"pick3\" :value=\"first\" />\n          <input type=\"checkbox\" v-model=\"pick4\" :value=\"first\" />\n        </form>\n      </div>\n      <div v-if=\"q_type === 2\">\n        <form>\n          <input type=\"checkbox\" v-model=\"pick1\" id=\"Single\" :value=\"Single\" />\n          <input type=\"checkbox\" v-model=\"pick2\" id=\"Album\" :value=\"Album\" />\n          <input type=\"checkbox\" v-model=\"pick3\" id=\"Neither\" :value=\"Neither\" />\n        </form>\n      </div>\n      <div v-if=\"q_type === 3\">\n        <form>\n          <label>{{ current_labels[0] }}</label>\n          <input type=\"checkbox\" v-model=\"pick1\" id=\"current_labels[0]\" :value=\"current_labels[0]\" />\n          <label>{{ current_labels[1] }}</label>\n          <input type=\"checkbox\" v-model=\"pick2\" id=\"current_labels[1]\" :value=\"current_labels[1]\" />\n          <label>{{ current_labels[2] }}</label>\n          <input type=\"checkbox\" v-model=\"pick3\" id=\"current_labels[2]\" :value=\"current_labels[2]\" />\n          <label>{{ current_labels[3] }}</label>\n          <input type=\"checkbox\" v-model=\"pick4\" id=\"current_labels[3]\" :value=\"current_labels[3]\" />\n        </form>\n        <h3 class=\"choice\">{{ pick }}</h3>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\n// import { number } from 'prop-types'\n\nexport default {\n  name: 'QuestionCard',\n  props: {\n    artistAlbumInfo: Object,\n    artistStartYr: String,\n    roundNum: Number\n  },\n  data: () => ({\n    pick1: \"\",\n    pick2: \"\",\n    pick3: \"\",\n    pick4: \"\",\n    // pick: \"\",\n    q_type: 9,\n    round_one: 50,\n    round_two: 100,\n    round_three: 150,\n    question: \"\",\n    cur_answer: \"\",\n    show_question: false,\n    possible_labels: [\"Interscope Records\", \"Capitol Records\", \"Cool Dog Records\", \"4-AD\", \"Hyperbole Records\", \"Flammable Records\", \"Truth & Lies Records\", \"Elektra Records\", \"MetalScope Records\", \"FreeZone Records\"],\n    current_labels: [],\n    years: [],\n    album_titles: [],\n    choices_record_labels: [],\n\n  }),\n  mounted() {\n    this.createQuestion(4)\n  },\n  methods: {\n    coreectAns(value1, value2) {\n      this.$emit('correct', value1, value2)\n    },\n    incorrectAns() {\n      this.$emit('incorrect')\n    },\n    checkAnswer() {\n      console.log('check answer')\n    },\n    createQuestion(questions) {\n      ///establish data for question\n      ///generate random numbers to choose data\n      ///artist name\n      let artist = this.artistAlbumInfo.album[0].strArtist\n      ///album at random\n      let albumIdx = Math.floor(Math.random() * this.artistAlbumInfo.album.length)\n      let album = this.artistAlbumInfo.album[albumIdx].strAlbum\n      ///release year of that album\n      let yearInt = this.artistAlbumInfo.album[albumIdx].intYearReleased\n      let year = yearInt.toString()\n      ///what type of question? 0,1,2,3\n      let questionType = Math.floor(Math.random() * questions)\n      ///Determin syntax for question\n      if (questionType === 0) {\n        this.questions = `What year was their album \"${album}\" released?`\n      } else if (questionType === 1) {\n        this.question = `What album did ${artist} release in the year ${year}?`\n      } else if (questionType === 2) {\n        this.question = `Was the album \"${album}\"\" released as a full album or as a single?`\n      } else if (questionType === 3) {\n        if (this.artistAlbumInfo.album[albumIdx].strLabel !== null) {\n          this.question = `What label was their album \"${album}\" released on?`\n        } else {\n          this.createQuestion(3)\n        }\n      }\n      if (this.question !== \"\") {\n        this.show_question = true\n        this.showQuestion(questionType, albumIdx)\n      }\n    },\n    showQuestion(type, albumIndex) {\n      console.log(albumIndex)\n      console.log(type)\n      if (type === 0) {\n        let artistStart = parseInt(this.artistStartYr)\n        let releaseYr = parseInt(this.artistAlbumInfo.album[albumIndex].intYearReleased)\n        let years = [releaseYr]\n        this.cur_answer = releaseYr\n        let yrDiff = 2022 - artistStart\n        const randYear = () => {\n          let num = Math.floor(Math.random() * yrDiff)\n          if (years.includes(num)) {\n            randYear()\n          } else {\n            years.push(num)\n          }\n        }\n        for (let i = 0; i < 3; i++) {\n          randYear()\n        }\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * years.length)\n          this.years.push(years[num])\n          years.splice(num, 1)\n        }\n        console.log(years)\n      } else if (type === 1) {\n        console.log('question type 1')\n      } else if (type === 2) {\n        console.log('question type 2')\n      } else if (type === 3) {\n        console.log('question type 3')\n        ///set answer\n        this.cur_answer = this.artistAlbumInfo.album[albumIndex].strLabel\n        ///add answer to answer choices\n        let pre_current_labels = []\n        pre_current_labels.push(this.artistAlbumInfo.album[albumIndex].strLabel)\n        ///add three wrong answers\n        for (let i = 0; i < 3; i++) {\n          let num = Math.floor(Math.random() * this.possible_labels.length - 1)\n          pre_current_labels.push(this.possible_labels[num])\n          this.possible_labels.splice(num, 1)\n        }\n        ///randomly choose from the previous array to place in final answers array\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * pre_current_labels.length)\n          this.current_labels.push(pre_current_labels[num])\n          pre_current_labels.splice(num, 1)\n        }\n      }\n      this.q_type = type\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}