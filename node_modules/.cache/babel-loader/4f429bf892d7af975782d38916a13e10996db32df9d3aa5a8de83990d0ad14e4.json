{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-49f1ad0d\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"game-space\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"printed-question-div\"\n};\nconst _hoisted_3 = {\n  class: \"answer-options\"\n};\nconst _hoisted_4 = {\n  class: \"printed-question\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_6 = [\"id\", \"onInput\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h2\", null, \"Round \" + _toDisplayString($props.roundNum), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_1, [_ctx.show_question ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"p\", _hoisted_4, _toDisplayString(_ctx.question), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.answers, (answer, i) => {\n    return _openBlock(), _createElementBlock(\"label\", {\n      key: i,\n      class: \"ans-choice\"\n    }, [_createTextVNode(_toDisplayString(answer), 1 /* TEXT */), _hoisted_5, _createElementVNode(\"input\", {\n      id: answer,\n      name: \"choice\",\n      type: \"radio\",\n      onInput: $event => $options.onChange(answer)\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_6)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.checkAnswer && $options.checkAnswer(...args))\n  }, \"Submit Answer\")])])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"mappings":";;;EAGSA,KAAK,EAAC;AAAY;;;EACKA,KAAK,EAAC;;;EACzBA,KAAK,EAAC;AAAgB;;EACtBA,KAAK,EAAC;AAAkB;gEAEbC,oBAAM;;;uBAP5BC,oBAcM,cAbJD,oBAA8B,YAA1B,QAAM,oBAAGE,eAAQ,kBACrBF,oBAWM,OAXNG,UAWM,GAVOC,kBAAa,kBAAxBH,oBASM,OATNI,UASM,GARJL,oBAOM,OAPNM,UAOM,GANJN,oBAA8C,KAA9CO,UAA8C,mBAAfH,aAAQ,qCACvCH,oBAGQO,6BAHqBJ,YAAO,GAArBK,MAAM,EAAEC,CAAC;yBAAxBT,oBAGQ;MAH+BU,GAAG,EAAED,CAAC;MAAEX,KAAK,EAAC;0CAChDU,MAAM,kBAAGG,UAAM,EAClBZ,oBAA2E;MAAnEa,EAAE,EAAEJ,MAAM;MAAEK,IAAI,EAAC,QAAQ;MAACC,IAAI,EAAC,OAAO;MAAEC,OAAK,YAAEC,iBAAQ,CAACR,MAAM;;kCAExET,oBAAmD;IAA1CkB,OAAK,yCAAED,qDAAW;KAAE,eAAa","names":["class","_createElementVNode","_createElementBlock","$props","_hoisted_1","_ctx","_hoisted_2","_hoisted_3","_hoisted_4","_Fragment","answer","i","key","_hoisted_5","id","name","type","onInput","$options","onClick"],"sourceRoot":"","sources":["/Users/jscarpelli/ga_seir919/projects/musical_pursuit/musicial_pursuit_front/musical_pursuit/src/components/GameComponents/Question.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Round {{ roundNum }} </h2>\n    <div class=\"game-space\">\n      <div v-if=\"show_question\" class=\"printed-question-div\">\n        <div class=\"answer-options\">\n          <p class=\"printed-question\">{{ question }}</p>\n          <label v-for=\"(answer, i) in answers\" :key=\"i\" class=\"ans-choice\">\n            {{ answer }}<br />\n            <input :id=\"answer\" name=\"choice\" type=\"radio\" @input=\"onChange(answer)\" />\n          </label>\n          <button @click=\"checkAnswer\">Submit Answer</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'QuestionCard',\n  props: {\n    // current_user: Object,\n    user: Object,\n    artistAlbumInfo: Object,\n    artistStartYr: String,\n    roundNum: Number,\n    lvl_up: Number\n  },\n  data: () => ({\n    checked: [],\n    answers: [],\n    chosen_answer: \"\",\n    pick: [],\n    q_type: 0,\n    round_one: 50,\n    round_two: 100,\n    round_three: 150,\n    question: \"\",\n    cur_answer: \"\",\n    show_question: false,\n    possible_labels: [\"Interscope Records\", \"Capitol Records\", \"Blood Sweat & Money MG\", \"Cool Dog Records\", \"4-AD\", \"Hyperbole Records\", \"Flammable Records\", \"Truth & Lies Records\", \"Elektra Records\", \"MetalScope Records\", \"FreeZone Records\", \"Fantastic\", \"Trauma\", \"Tender Records\", \"Paramount Records\", \"Simple Vibes\", \"Carpathian\", \"Hubsuscus\", \"MetalZone\", \"Pop Magic\", \"Scraperelli Records\", \"JJacobs Records\", \"AT Music Group\", \"Hi Im Jeremy Recordings\", \"Mad Ash Music\", \"MoMed-Only-Head Records\", \"SMW Hot-Mic Records\", \"RyTy Music Group\", \"JC Endzone Records\", \"GA Shuld Pay Records\", \"KustMud Custom Music Group\", \"Has Read Or Likes To Read Records\", \"Not 1 but 2 Music Group\", \"GGP LPs\", \"Alveal Recordings\", \"CyberGonzo Music\", \"K White Records\", \"Not Steven Records\", \"TomTomKickSnare Music\"],\n    current_labels: [],\n    years: [],\n    album_titles: [],\n    choices_record_labels: [],\n\n  }),\n  mounted() {\n    this.createQuestion(4)\n  },\n  methods: {\n    onChange(answer) {\n      this.chosen_answer = answer\n      console.log(this.chosen_answer)\n      console.log(this.checked)\n    },\n    correctAns(score, lvl) {\n      this.$emit('correct', score, lvl)\n    },\n    incorrectAns() {\n      this.$emit('incorrect')\n    },\n    checkAnswer() {\n      let lvl = 0\n      let score = 0\n      if (this.roundNum === 1) {\n        score = this.round_one\n      } else if (this.roundNum === 2) {\n        score = this.round_two\n      } else if (this.roundNum === 3) {\n        lvl = 1\n        score = this.round_three\n      }\n      if (this.cur_answer === this.chosen_answer) {\n        this.correctAns(score, lvl)\n      } else {\n        this.incorrectAns()\n      }\n      console.log('check answer')\n    },\n    createQuestion(questions) {\n      console.log(this.user)\n      ///establish data for question\n      ///generate random numbers to choose data\n      ///artist name\n      let artist = this.artistAlbumInfo.album[0].strArtist\n      ///album at random\n      let albumIdx = Math.floor(Math.random() * this.artistAlbumInfo.album.length)\n      let album = this.artistAlbumInfo.album[albumIdx].strAlbum\n      ///release year of that album\n      let yearInt = this.artistAlbumInfo.album[albumIdx].intYearReleased\n      let year = yearInt.toString()\n      ///what type of question? 0,1,2,3\n      let questionType = Math.floor(Math.random() * questions)\n      ///Determin syntax for question\n      if (questionType === 0) {\n        console.log('what year')\n        this.question = `What year was their album \"${album}\" released?`\n      } else if (questionType === 1) {\n        console.log('what album')\n        this.question = `What album did ${artist} release in the year ${year}?`\n      } else if (questionType === 2) {\n        this.question = `Was the album \"${album}\"\" released as a full album or as a single?`\n        console.log('album or single')\n      } else if (questionType === 3) {\n        if (this.artistAlbumInfo.album[albumIdx].strLabel !== null) {\n          console.log('label question')\n          this.question = `What label was their album \"${album}\" released on?`\n        } else {\n          console.log('no label info')\n          this.createQuestion(3)\n        }\n      }\n      if (this.question !== \"\") {\n        this.show_question = true\n        this.showQuestion(questionType, albumIdx)\n      }\n    },\n    showQuestion(type, albumIndex) {\n      ///ALBUM YEARS QUESTION\n      if (type === 0) {\n        this.answers = []\n        console.log('question type 0')\n        let artistStart = parseInt(this.artistStartYr)\n        let releaseYr = parseInt(this.artistAlbumInfo.album[albumIndex].intYearReleased)\n        let years = [releaseYr]\n        this.cur_answer = releaseYr\n        let yrDiff = 2022 - artistStart\n        const randYear = () => {\n          let num = Math.floor(Math.random() * yrDiff)\n          if (years.includes(num)) {\n            randYear()\n          } else {\n            years.push(num + artistStart)\n          }\n        }\n        for (let i = 0; i < 3; i++) {\n          randYear()\n        }\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * years.length)\n          this.answers.push(years[num])\n          years.splice(num, 1)\n        }\n        console.log(this.years)\n        ///ALBUM TITLES QUESTION\n      } else if (type === 1) {\n        this.answers = []\n        console.log('question type 1')\n        ///transfer album info from data to function-local\n        let albums = this.artistAlbumInfo.album\n        console.log(albums)\n        ///create temp array for 4 album titles\n        let albumTitles = []\n        ///include the correct answer\n        albumTitles.push(albums[albumIndex].strAlbum)\n        ///set the answer in data\n        this.cur_answer = albums[albumIndex].strAlbum\n        ///remove answer from all available artist albums\n        albums.splice(albumIndex, 1)\n        ///do a loop to add a random album to the temp albums array\n        for (let i = 0; i < 3; i++) {\n          let num = Math.floor(Math.random() * albums.length)\n          albumTitles.push(albums[num].strAlbum)\n          albums.splice(num, 1)\n        }\n        console.log(this.artistAlbumInfo.album)\n        ///randomly send one of the 4 album titles to the answer array\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * albumTitles.length)\n          this.answers.push(albumTitles[num])\n          albumTitles.splice(num, 1)\n        }\n        ///ALBUM SINGLE QUESTION\n      } else if (type === 2) {\n        this.answers = []\n        console.log('question type 2')\n        ///simply set the current answer to the release format in the chosen album record\n        this.cur_answer = this.artistAlbumInfo.album[albumIndex].strReleaseFormat\n        this.answers.push(\"Single\")\n        this.answers.push(\"Album\")\n        this.answers.push(\"Other\")\n        this.answers.push(\"Compilation\")\n        ///ALBUM LABEL QUESTION\n      } else if (type === 3) {\n        this.answers = []\n        console.log('question type 3')\n        ///set answer\n        this.cur_answer = this.artistAlbumInfo.album[albumIndex].strLabel\n        ///add answer to answer choices\n        let pre_current_labels = []\n        pre_current_labels.push(this.artistAlbumInfo.album[albumIndex].strLabel)\n        ///add three wrong answers\n        for (let i = 0; i < 3; i++) {\n          let num = Math.floor(Math.random() * this.possible_labels.length - 1)\n          pre_current_labels.push(this.possible_labels[num])\n          this.possible_labels.splice(num, 1)\n        }\n        ///randomly choose from the previous array to place in final answers array\n        for (let i = 0; i < 4; i++) {\n          let num = Math.floor(Math.random() * pre_current_labels.length)\n          this.answers.push(pre_current_labels[num])\n          pre_current_labels.splice(num, 1)\n        }\n      }\n      this.q_type = type\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.game-space {\n  display: flex;\n  justify-content: center;\n  margin: 2vw;\n}\n\n.answer-options>input:checked {\n\n  background-color: rgb(146, 146, 146);\n}\n\n/* checkbox>input:checked {\n} */\n\n.question,\n.answer-options {\n  display: grid;\n  grid-template-columns: 1fr;\n  /* grid-template-rows: 1fr 1fr 1fr 1fr; */\n  background-color: rgba(105, 105, 105, 0.247);\n  padding: 1vh 2vw 1vh 2vw;\n  border-radius: 8px;\n  box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.347);\n}\n\nbutton {\n  background-color: rgb(244, 118, 28);\n  border-radius: 4px;\n  height: 4vh;\n  text-shadow: 2px 2px 3px rgba(0, 0, 0, 0.347);\n  margin: 2vh\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}