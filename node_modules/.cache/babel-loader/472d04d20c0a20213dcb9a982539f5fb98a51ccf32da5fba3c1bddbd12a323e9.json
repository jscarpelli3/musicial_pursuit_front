{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, toHandlers as _toHandlers, mergeProps as _mergeProps, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_md_table_cell_selection = _resolveComponent(\"md-table-cell-selection\");\n  return _openBlock(), _createElementBlock(\"tr\", _mergeProps({\n    class: [\"md-table-row\", $options.rowClasses],\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.onClick && $options.onClick(...args))\n  }, _toHandlers(_ctx.$listeners, true)), [$options.selectableCount ? (_openBlock(), _createBlock(_component_md_table_cell_selection, {\n    key: 0,\n    value: $options.isMultipleSelected,\n    onInput: _cache[0] || (_cache[0] = selected => selected ? $options.addSelection() : $options.removeSelection()),\n    \"md-disabled\": $props.mdDisabled,\n    \"md-selectable\": $props.mdSelectable === 'multiple',\n    \"md-row-id\": $props.mdIndex\n  }, null, 8 /* PROPS */, [\"value\", \"md-disabled\", \"md-selectable\", \"md-row-id\"])) : _createCommentVNode(\"v-if\", true), _renderSlot(_ctx.$slots, \"default\")], 16 /* FULL_PROPS */);\n}","map":{"version":3,"mappings":";;;uBACEA,oBASK,MATLC,YASK;IATDC,KAAK,GAAC,cAAc,EAASC,mBAAU;IAAGC,OAAK,yCAAED,6CAAO;KAAEE,YAAMC,IAAW,WAAD,WAOpEH,wBAAe,kBANvBI,aAM2BC;;IALxBC,KAAK,EAAEN,2BAAkB;IACzBO,OAAK,4BAAEC,QAAQ,IAAIA,QAAQ,GAAGR,qBAAY,KAAKA,wBAAe;IAC9D,aAAW,EAAES,iBAAU;IACvB,eAAa,EAAEA,mBAAY;IAC3B,WAAS,EAAEA;wHAEdC,YAAQP","names":["_createElementBlock","_mergeProps","class","$options","onClick","_toHandlers","_ctx","_createBlock","_component_md_table_cell_selection","value","onInput","selected","$props","_renderSlot"],"sourceRoot":"","sources":["/Users/jscarpelli/ga_seir919/projects/musical_pursuit/musicial_pursuit_front/musical_pursuit/src/components/MdTable/MdTableRow.vue"],"sourcesContent":["<template>\n  <tr class=\"md-table-row\" :class=\"rowClasses\" @click=\"onClick\" v-on=\"$listeners\">\n    <md-table-cell-selection\n      :value=\"isMultipleSelected\"\n      @input=\"selected => selected ? addSelection() : removeSelection()\"\n      :md-disabled=\"mdDisabled\"\n      :md-selectable=\"mdSelectable === 'multiple'\"\n      :md-row-id=\"mdIndex\"\n      v-if=\"selectableCount\" />\n    <slot />\n  </tr>\n</template>\n\n<script>\n  import MdPropValidator from 'core/utils/MdPropValidator'\n  import MdTableCellSelection from './MdTableCellSelection'\n\n  export default {\n    name: 'MdTableRow',\n    components: {\n      MdTableCellSelection\n    },\n    props: {\n      mdIndex: [Number, String],\n      mdId: [Number, String],\n      mdSelectable: {\n        type: [String],\n        ...MdPropValidator('md-selectable', ['multiple', 'single'])\n      },\n      mdDisabled: Boolean,\n      mdAutoSelect: Boolean,\n      mdItem: [Array, Object]\n    },\n    inject: ['MdTable'],\n    data: () => ({\n      index: null\n    }),\n    computed: {\n      selectableCount () {\n        return this.MdTable.selectable.length\n      },\n      isMultipleSelected () {\n        return this.MdTable.selectedItems.includes(this.mdItem)\n      },\n      isSingleSelected () {\n        return this.MdTable.singleSelection === this.mdItem\n      },\n      hasMultipleSelection () {\n        return this.MdTable.hasValue && this.mdSelectable === 'multiple'\n      },\n      hasSingleSelection () {\n        return this.MdTable.hasValue && this.mdSelectable === 'single'\n      },\n      rowClasses () {\n        if (this.MdTable.hasValue) {\n          return {\n            'md-has-selection': !this.mdDisabled && (this.mdAutoSelect || this.hasSingleSelection),\n            'md-selected': this.isMultipleSelected,\n            'md-selected-single': this.isSingleSelected\n          }\n        }\n      },\n      isInSelectedItems () {\n        return this.MdTable.selectedItems.includes(this.mdItem)\n      }\n    },\n    watch: {\n      mdDisabled () {\n        if (this.mdDisabled) {\n          this.removeSelectableItem()\n        } else {\n          this.addSelectableItem()\n        }\n      },\n      mdSelectable () {\n        this.MdTable.selectingMode = this.mdSelectable\n      },\n      mdItem (after, before) {\n        this.removeSelectableItem(before)\n        this.$nextTick(this.addSelectableItem)\n      }\n    },\n    methods: {\n      onClick () {\n        if (this.MdTable.hasValue && !this.mdDisabled) {\n          if (this.hasMultipleSelection) {\n            this.selectRowIfMultiple()\n          } else if (this.hasSingleSelection) {\n            this.selectRowIfSingle()\n          }\n        }\n      },\n      toggleSelection () {\n        this.MdTable.manageItemSelection(this.mdItem)\n      },\n      addSelection () {\n        if (!this.isMultipleSelected) {\n          this.MdTable.selectedItems = this.MdTable.selectedItems.concat([this.mdItem])\n        }\n      },\n      removeSelection () {\n        if (this.isMultipleSelected) {\n          this.MdTable.selectedItems = this.MdTable.selectedItems.filter(target => target !== this.mdItem)\n        }\n      },\n      selectRowIfSingle () {\n        if (this.MdTable.singleSelection === this.mdItem) {\n          this.MdTable.singleSelection = null\n        } else {\n          this.MdTable.singleSelection = this.mdItem\n        }\n      },\n      selectRowIfMultiple () {\n        if (this.mdAutoSelect) {\n          this.toggleSelection()\n        }\n      },\n      addSelectableItem () {\n        if (!this.hasMultipleSelection || this.mdDisabled) {\n          return false\n        }\n\n        if (this.MdTable.selectable.includes(this.mdItem)) {\n          return false\n        }\n\n        this.MdTable.selectable = this.MdTable.selectable.concat([this.mdItem])\n      },\n      removeSelectableItem (target = this.mdItem) {\n        if (this.mdSelectable === 'multiple') {\n          this.MdTable.selectable = this.MdTable.selectable.filter(item => item !== target)\n        }\n      }\n    },\n    created () {\n      this.$nextTick(() => {\n        this.addSelectableItem()\n        this.MdTable.selectingMode = this.mdSelectable\n      })\n    },\n    beforeDestroy () {\n      this.removeSelectableItem()\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n  @import \"~components/MdAnimation/variables\";\n\n  .md-table-row {\n    transition: .3s $md-transition-default-timing;\n    transition-property: background-color, font-weight;\n    will-change: background-color, font-weight;\n\n    &.md-has-selection {\n      cursor: pointer;\n    }\n\n    &.md-selected-single {\n      font-weight: 500;\n    }\n\n    tbody & td {\n      border-top: 1px solid;\n    }\n  }\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}